<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>接取送达费率页面实现</title>
    <url>/2020/03/31/workRecord/</url>
    <content><![CDATA[<p>页面实现结果如下图：</p>
<p><img src="https://tracerzzz.ltd/js/receive.png" style="width: 100%"></p>
<blockquote>
<p>定义load方法，用来加载费率计算公式，若之前没有设定,创建三条记录，将so,a,b都设置为暂未设定</p>
</blockquote>
<h4 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!records||records.length==<span class="number">0</span>)&#123; <span class="comment">//暂未设定</span></span><br><span class="line">$thisObj.list=[];</span><br><span class="line">list=[</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">containerTypeName</span>:<span class="string">'20英尺集装箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'A'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'B'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">containerTypeName</span>:<span class="string">'40英尺集装箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'A'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'B'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">containerTypeName</span>:<span class="string">'20英尺35t箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'A'</span>,&#125;,</span><br><span class="line">         &#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'B'</span>,&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">get</span>('grid').getStore().removeAll();</span><br><span class="line">    <span class="keyword">get</span>('grid').getStore().add(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若果返回的请求结果有设定，那么遍历结果，追加没有的设置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//已经设定参数</span></span><br><span class="line">$thisObj.list=records;</span><br><span class="line">    <span class="comment">//console.log(1);</span></span><br><span class="line">    <span class="keyword">let</span> items=[]; <span class="comment">//grid items</span></span><br><span class="line">    <span class="keyword">for</span>(item <span class="keyword">of</span> $thisObj.list)&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.containerSizeTypeCode==<span class="string">'CONTAINER_SIZE_TYPE_20'</span>)&#123;</span><br><span class="line">        item.containerTypeName=<span class="string">'20英尺集装箱'</span>;</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">containerTypeName</span>:<span class="string">'20英尺集装箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:item.initMil,&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:item.initPrice,<span class="attr">name</span>:<span class="string">'A'</span>&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:item.milPrice,<span class="attr">name</span>:<span class="string">'B'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.containerSizeTypeCode==<span class="string">'CONTAINER_SIZE_TYPE_40'</span>)&#123;</span><br><span class="line">        item.containerTypeName=<span class="string">'40英尺集装箱'</span>;</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">containerTypeName</span>:<span class="string">'40英尺集装箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:item.initMil,&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">value</span>:item.initPrice,<span class="attr">name</span>:<span class="string">'A'</span>&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">value</span>:item.milPrice,<span class="attr">name</span>:<span class="string">'B'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.containerSizeTypeCode==<span class="string">'CONTAINER_SIZE_TYPE_25'</span>)&#123;</span><br><span class="line">        item.containerTypeName=<span class="string">'25英尺35t箱'</span>;</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_25"</span>,<span class="attr">containerTypeName</span>:<span class="string">'25英尺35t箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:item.initMil,&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_25"</span>,<span class="attr">value</span>:item.initPrice,<span class="attr">name</span>:<span class="string">'A'</span>&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">itemId</span>:item.id,<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_25"</span>,<span class="attr">value</span>:item.milPrice,<span class="attr">name</span>:<span class="string">'B'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> count1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> count2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> count3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> items)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.containerSizeTypeCode&amp;&amp;i.containerSizeTypeCode==<span class="string">'CONTAINER_SIZE_TYPE_20'</span>) count1++;</span><br><span class="line">        <span class="keyword">if</span>(i.containerSizeTypeCode&amp;&amp;i.containerSizeTypeCode==<span class="string">'CONTAINER_SIZE_TYPE_40'</span>) count2++;</span><br><span class="line">        <span class="keyword">if</span>(i.containerSizeTypeCode&amp;&amp;i.containerSizeTypeCode==<span class="string">'CONTAINER_SIZE_TYPE_25'</span>) count3++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count1==<span class="number">0</span>) &#123;</span><br><span class="line">    items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">containerTypeName</span>:<span class="string">'20英尺集装箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,&#125;);</span><br><span class="line">         items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:<span class="string">"暂未设定"</span>,<span class="attr">name</span>:<span class="string">'A'</span>&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_20"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'B'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count2==<span class="number">0</span>) &#123;</span><br><span class="line">    items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">containerTypeName</span>:<span class="string">'40英尺集装箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,&#125;);</span><br><span class="line">         items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">value</span>:<span class="string">"暂未设定"</span>,<span class="attr">name</span>:<span class="string">'A'</span>&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_40"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'B'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count3==<span class="number">0</span>) &#123;</span><br><span class="line">    items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_25"</span>,<span class="attr">containerTypeName</span>:<span class="string">'25英尺35t箱'</span>,<span class="attr">name</span>:<span class="string">'So'</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_25"</span>,<span class="attr">value</span>:<span class="string">"暂未设定"</span>,<span class="attr">name</span>:<span class="string">'A'</span>&#125;);</span><br><span class="line">        items.push(&#123;<span class="attr">containerSizeTypeCode</span>:<span class="string">"CONTAINER_SIZE_TYPE_25"</span>,<span class="attr">value</span>:<span class="string">'暂未设定'</span>,<span class="attr">name</span>:<span class="string">'B'</span>&#125;);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">get</span>('grid').getStore().removeAll();</span><br><span class="line">    <span class="keyword">get</span>('grid').getStore().add(items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="变更费率"><a href="#变更费率" class="headerlink" title="变更费率"></a>变更费率</h4><blockquote>
<p>校验输入</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inputValue=[];</span><br><span class="line"><span class="keyword">var</span> inputCount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> validflag=<span class="number">0</span>;</span><br><span class="line">$(<span class="string">"input"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="keyword">this</span>).val()==<span class="string">''</span>||$(<span class="keyword">this</span>).val()==<span class="literal">null</span>)&#123;</span><br><span class="line">    inputCount++;</span><br><span class="line">    $(<span class="keyword">this</span>).focus();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r1= <span class="regexp">/^[0-9]*[1-9][0-9]*$/</span>　　<span class="comment">//正整数 </span></span><br><span class="line">    <span class="keyword">if</span>(!r1.exec($(<span class="keyword">this</span>).val()))&#123;</span><br><span class="line">    validflag++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inputValue.push($(<span class="keyword">this</span>).val());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span>(inputCount==inputValue.length)&#123;</span><br><span class="line">    showMsgBox(&#123;<span class="attr">text</span>:<span class="string">"请填写一条变更值！"</span> ,  <span class="attr">msgType</span>:<span class="string">'s'</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(validflag!=<span class="number">0</span>)&#123;</span><br><span class="line">    showMsgBox(&#123;<span class="attr">text</span>:<span class="string">"请输入整数类型！"</span> ,  <span class="attr">msgType</span>:<span class="string">'s'</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>变更费率<br>将数据格式化（将九条记录转换为三条记录），并且如果是首次设定，那么必须三个参数同时填写。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gridItem=<span class="keyword">get</span>('grid').getStore().data.items;</span><br><span class="line">    var updateList=[];</span><br><span class="line"> for(let i=0;i&lt;gridItem.length;i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(gridItem[i].data.containerTypeName)&#123;<span class="comment">//存在名称</span></span><br><span class="line">         updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)]=&#123;&#125;;</span><br><span class="line">         updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].containerTypeName=gridItem[i].data.containerTypeName;</span><br><span class="line">         updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].initMil=gridItem[i].data.value;<span class="comment">//so</span></span><br><span class="line">         updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].initMilBefore=gridItem[i].data.value;<span class="comment">//so</span></span><br><span class="line">             <span class="keyword">if</span>(gridItem[i].data.setValue!=<span class="string">''</span>&amp;&amp;gridItem[i].data.setValue!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">             updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].initMil=gridItem[i].data.setValue;<span class="comment">//so</span></span><br><span class="line">             &#125;</span><br><span class="line">         updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].containerSizeTypeCode=gridItem[i].data.containerSizeTypeCode;<span class="comment">//so</span></span><br><span class="line">         <span class="keyword">if</span>(gridItem[i].data.itemId)&#123;<span class="comment">//存在id</span></span><br><span class="line">          updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].id=gridItem[i].data.itemId;<span class="comment">//so</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(gridItem[i].data.name==<span class="string">'A'</span>)&#123;</span><br><span class="line">     updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].initPrice=gridItem[i].data.value</span><br><span class="line">     updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].initPriceBefore=gridItem[i].data.value</span><br><span class="line">     <span class="keyword">if</span>(gridItem[i].data.setValue!=<span class="string">''</span>&amp;&amp;gridItem[i].data.setValue!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">      updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].initPrice=gridItem[i].data.setValue</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(gridItem[i].data.name==<span class="string">'B'</span>)&#123;</span><br><span class="line">     updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].milPrice=gridItem[i].data.value</span><br><span class="line">     updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].milPriceBefore=gridItem[i].data.value</span><br><span class="line">     <span class="keyword">if</span>(gridItem[i].data.setValue!=<span class="string">''</span>&amp;&amp;gridItem[i].data.setValue!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">      updateList[<span class="built_in">parseInt</span>(i/<span class="number">3</span>)].milPrice=gridItem[i].data.setValue</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> removeList=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> updateList)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!item.id&amp;&amp;item.initMilBefore==<span class="string">"暂未设定"</span>&amp;&amp;item.milPriceBefore==<span class="string">'暂未设定'</span>&amp;&amp;item.initPriceBefore==<span class="string">'暂未设定'</span>)&#123;<span class="comment">//若之前未设定</span></span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(item.initMil==<span class="string">"暂未设定"</span>)count++;</span><br><span class="line">    <span class="keyword">if</span>(item.milPrice==<span class="string">"暂未设定"</span>)count++;</span><br><span class="line">    <span class="keyword">if</span>(item.initPrice==<span class="string">"暂未设定"</span>)count++;</span><br><span class="line">     <span class="keyword">if</span>(count!=<span class="number">0</span>&amp;&amp;count!=<span class="number">3</span>)&#123;</span><br><span class="line">      showMsgBox(&#123;<span class="attr">text</span>:<span class="string">"由于之前"</span>+item.containerTypeName+<span class="string">'未进行计费公式设定，请填写完整数值（so,A,B）! '</span> ,  <span class="attr">msgType</span>:<span class="string">'s'</span>,<span class="attr">timer</span>:<span class="number">7000</span>&#125;);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(count==<span class="number">3</span>)&#123;</span><br><span class="line">      removeList.push(item);</span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">of</span> removeList)&#123;</span><br><span class="line">    updateList.remove(item);</span><br><span class="line">&#125;</span><br><span class="line">$thisObj.updatelist=updateList;</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>grid追加输入框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">renderer: <span class="function"><span class="keyword">function</span> (<span class="params">value, meta, record, rowIndex, colIndex</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;input type="text" value="" onchange="var s = Ext.getCmp(\'grid\').store; s.getAt(s.findExact(\'id\',\''</span> + record.get(<span class="string">'id'</span>) + <span class="string">'\')).set(\'setValue\', this.value)" /&gt;'</span>;</span><br><span class="line">                         &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载完页面调用预加载函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">listeners:&#123;</span><br><span class="line">    <span class="string">'afterrender'</span>:load</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求参数为json格式(1.修改header,2.格式化请求参数-JSON.stringify())</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;;</span><br><span class="line">                <span class="keyword">var</span> params=&#123;&#125;;</span><br><span class="line">                params.receiveFees=$thisObj.updatelist;</span><br><span class="line">                params=<span class="built_in">JSON</span>.stringify(params);</span><br><span class="line">                Ajax.request(&#123;</span><br><span class="line">                url:basePath + <span class="string">'/receive_fee/update'</span>,</span><br><span class="line">                hide:<span class="literal">true</span>,</span><br><span class="line">                headers: headers,</span><br><span class="line">                params:params,</span><br><span class="line">                execute: <span class="function"><span class="keyword">function</span> (<span class="params">result , success</span>) </span>&#123;</span><br><span class="line">                    changeWindow.hide();</span><br><span class="line">                    showMsgBox(&#123;<span class="attr">text</span>:<span class="string">"变更成功！"</span> ,  <span class="attr">msgType</span>:<span class="string">'s'</span>&#125;);</span><br><span class="line">                    load();</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>后台接收方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">ResultBean <span class="title">update</span><span class="params">(@RequestBody Map&lt;String,Object&gt; params)</span></span>&#123;</span><br><span class="line">    <span class="comment">//List&lt;ReceiveFee&gt; receiveFees</span></span><br><span class="line">    ResultBean resultBean = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;ReceiveFee&gt; receiveFees =  BaseConvertUtil.mapToBean((List&lt;Map&lt;String,Object&gt;&gt;)params.get(<span class="string">"receiveFees"</span>),ReceiveFee<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        resultBean = <span class="keyword">this</span>.receiveFeeService.update(receiveFees);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">        resultBean = BaseResultBeanUtil.getResultBean(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>github 和 gitlab 同时使用</title>
    <url>/2020/03/31/git/gitlab%E5%92%8Cgithub%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="github-和-gitlab-同时使用"><a href="#github-和-gitlab-同时使用" class="headerlink" title="github 和 gitlab 同时使用"></a>github 和 gitlab 同时使用</h3><blockquote>
<p>背景：原先电脑上已经存在github配置，公司内部需要使用gitlab进行项目管理，so，需要在同一台机器上配置github和gitlab的账号密码信息</p>
</blockquote>
<h4 id="第一步-生成秘钥"><a href="#第一步-生成秘钥" class="headerlink" title="第一步 生成秘钥"></a>第一步 生成秘钥</h4><p>github设置如下（之前已经设置过了）</p>
<pre><code>ssh-keygen -t rsa -C &quot;注册的github邮箱&quot;
</code></pre><p>提示要输入名称, 不管, 一路回车, 也不要设置密码</p>
<p>接下来配置为gitlab生成秘钥</p>
<pre><code>ssh-keygen -t rsa -C &quot;注册的gitlab邮箱&quot;
</code></pre><p>这次名称输入id_rsa_gitlab, 路径保存在~/.ssh/下面</p>
<p>在~/.ssh/目录下共有如下文件</p>
<pre><code>id_rsa.pub        id_rsa_gitlab.pub
id_rsa            id_rsa_gitlab
</code></pre><h4 id="第二步-配置秘钥"><a href="#第二步-配置秘钥" class="headerlink" title="第二步 配置秘钥"></a>第二步 配置秘钥</h4><p>分别读取id_rsa和id_rsa_gitlab</p>
<pre><code>cat id_rsa.pub
cat id_rsa_gitlab.pub
</code></pre><p>将公钥分别配置到github和gitlab的个人设置里面</p>
<h4 id="第三步-配置config"><a href="#第三步-配置config" class="headerlink" title="第三步 配置config"></a>第三步 配置config</h4><p>在 ~/.ssh/目录下创建config文件</p>
<pre><code>cd ~/.ssh/
vim config
</code></pre><p>输入以下配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gitlab</span><br><span class="line">Host gitlab</span><br><span class="line"></span><br><span class="line">    HostName gitlab.ctzcdn.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line"># githubhttp://zhzhzh@106.39.160.94/front/webpackDevKit.git</span><br><span class="line">Host github</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<h4 id="第四部-使用"><a href="#第四部-使用" class="headerlink" title="第四部 使用"></a>第四部 使用</h4><p>由于之前使用gitHub时，将github的用户名，邮箱设置为了全局<br>所以在gitlab项目中，需要另外设置用户名为gitlab的用户名和邮箱：</p>
<pre><code>git init 
git config --local user.name &quot;gitlab用户名&quot;
git config --local user.emai &quot;gitlab申请邮箱&quot;
</code></pre><p>这样在gitlab项目目录下的就可以将项目远程配置给gitlab服务器了</p>
<pre><code>git remote add origin http://zhzhzh@106.39.160.94/front/webpackDevKit.git
</code></pre><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>另外注意：在使用ssh连接的时候，报了一个错误：</p>
<pre><code>git push origin master
ssh_exchange_identification: read: Connection reset by peer
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
</code></pre><p>目前还没搞清楚原因在哪里，解决办法为将连接地址改为http协议，而不是ssh协议。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令</title>
    <url>/2018/06/17/docker/dokcer%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>docker在实际的开发、学习以及线上部署中已经频繁被用到，这里总结了一些常用的docker命令，以及docker使用过程中遇到的一些坑，记录爬坑的过程。以便再次遇到相同问题的时候查阅。</p>
<p><img src="https://tracerzzz.ltd/2018061615291325776173.png" alt="2018061615291325776173.png"></p>
<h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>
<h4 id="条件查询容器"><a href="#条件查询容器" class="headerlink" title="条件查询容器"></a>条件查询容器</h4><p><img src="https://tracerzzz.ltd/20180616152913245131323.png" alt="20180616152913245131323.png"></p>
<h3 id="根据状态查询容器"><a href="#根据状态查询容器" class="headerlink" title="根据状态查询容器"></a>根据状态查询容器</h3><h4 id="查询条件如下："><a href="#查询条件如下：" class="headerlink" title="查询条件如下："></a>查询条件如下：</h4><p><img src="https://tracerzzz.ltd/20180616152913231015811.png" alt="20180616152913231015811.png"></p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -f "status=created"</span><br></pre></td></tr></table></figure>
<h3 id="快速删除退出的容器"><a href="#快速删除退出的容器" class="headerlink" title="快速删除退出的容器"></a>快速删除退出的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -q -f "status=exited")</span><br></pre></td></tr></table></figure>
<h3 id="nginx镜像的日志"><a href="#nginx镜像的日志" class="headerlink" title="nginx镜像的日志"></a>nginx镜像的日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># forward request and error logs to docker log collector</span><br><span class="line">RUN ln -sf /dev/stdout /var/log/nginx/access.log \</span><br><span class="line">	&amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>
<p>官方dockerfile中有以上的命令，即将日志输出到标准输出和标准错误输出</p>
<p>在宿主机可以使用docker logs命令查看日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f containerId</span><br></pre></td></tr></table></figure>
<h4 id="镜像占用硬件状态"><a href="#镜像占用硬件状态" class="headerlink" title="镜像占用硬件状态"></a>镜像占用硬件状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stats containerId</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>压力测试工具webbench安装与使用</title>
    <url>/2018/06/16/%E6%9E%B6%E6%9E%84/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7webbench%E5%8E%8B%E6%B5%8Bnginx/</url>
    <content><![CDATA[<p>Webbench能测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。webbench的标准测试可以向我们展示服务器的两项内容：<strong>每秒钟相应请求数和每秒钟传输数据量。</strong>webbench不但能具有便准静态页面的测试能力，还能对动态页面（ASP,PHP,JAVA,CGI）进 行测试的能力。还有就是他支持对含有SSL的安全网站例如电子商务网站进行静态或动态的性能测试。 **Webbench最多可以模拟3万个并发连接去测试网站的负载能力。</p>
<p><img src="https://tracerzzz.ltd/20180616152907932443010.png" alt="20180616152907932443010.png"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.ha97.com/code/webbench-1.5.tar.gz</span><br><span class="line">tar zxvf webbench-1.5.tar.gz</span><br><span class="line">cd webbench-1.5</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cc -Wall -ggdb -W -O   -c -o webbench.o webbench.c</span><br><span class="line">webbench.c: 在函数‘alarm_handler’中:</span><br><span class="line">webbench.c:77:31: 警告：未使用的参数‘signal’ [-Wunused-parameter]</span><br><span class="line"> static void alarm_handler(int signal)</span><br><span class="line">                               ^</span><br><span class="line">cc -Wall -ggdb -W -O  -o webbench webbench.o</span><br><span class="line">ctags *.c</span><br><span class="line">/bin/sh: ctags: 未找到命令</span><br><span class="line">make: [tags] 错误 127 (忽略)</span><br><span class="line">install -s webbench /usr/local/bin</span><br><span class="line">install -m 644 webbench.1 /usr/local/man/man1</span><br><span class="line">install: 无法创建普通文件&quot;/usr/local/man/man1&quot;: 没有那个文件或目录</span><br><span class="line">make: *** [install] 错误 1</span><br></pre></td></tr></table></figure>
<p>这是因为缺少ctags,需要安装依赖，centos7环境下直接yum安装；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install ctags</span><br></pre></td></tr></table></figure>
<p>再次执行make &amp;&amp; make install,依旧报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctags *.c</span><br><span class="line">install -s webbench /usr/local/bin</span><br><span class="line">install -m 644 webbench.1 /usr/local/man/man1</span><br><span class="line">install: 无法创建普通文件&quot;/usr/local/man/man1&quot;: 没有那个文件或目录</span><br><span class="line">make: *** [install] 错误 1</span><br></pre></td></tr></table></figure>
<p>这是因为没有指定的目录导致的，通过mkdir创建指定的目录即可，再次make &amp;&amp; make install</p>
<p>得到安装成功结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install -s webbench /usr/local/bin</span><br><span class="line">install -m 644 webbench.1 /usr/local/man/man1</span><br><span class="line">install -d /usr/local/share/doc/webbench</span><br><span class="line">install -m 644 debian/copyright /usr/local/share/doc/webbench</span><br><span class="line">install -m 644 debian/changelog /usr/local/share/doc/webbench</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>命令提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webbench</span><br><span class="line">webbench [option]... URL</span><br><span class="line">  -f|--force               Don&apos;t wait for reply from server.</span><br><span class="line">  -r|--reload              Send reload request - Pragma: no-cache.</span><br><span class="line">  -t|--time &lt;sec&gt;          Run benchmark for &lt;sec&gt; seconds. Default 30.</span><br><span class="line">  -p|--proxy &lt;server:port&gt; Use proxy server for request.</span><br><span class="line">  -c|--clients &lt;n&gt;         Run &lt;n&gt; HTTP clients at once. Default one.</span><br><span class="line">  -9|--http09              Use HTTP/0.9 style requests.</span><br><span class="line">  -1|--http10              Use HTTP/1.0 protocol.</span><br><span class="line">  -2|--http11              Use HTTP/1.1 protocol.</span><br><span class="line">  --get                    Use GET request method.</span><br><span class="line">  --head                   Use HEAD request method.</span><br><span class="line">  --options                Use OPTIONS request method.</span><br><span class="line">  --trace                  Use TRACE request method.</span><br><span class="line">  -?|-h|--help             This information.</span><br><span class="line">  -V|--version             Display program version.</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webbench -c 500 -t 10 localhost/test</span><br></pre></td></tr></table></figure>
<p>每次500个客户端，访问10s</p>
<p>nginx配置根据机器的硬件配置</p>
<p><img src="https://tracerzzz.ltd/2018061615291219132577.png" alt="2018061615291219132577.png"></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="https://tracerzzz.ltd/20180616152912093499834.png" alt="20180616152912093499834.png"></p>
<p>十秒内完成了接近六万的请求，每秒差不多六千并发；可以多试几次</p>
<p>将客户端数量进行调整，测试得到如下结果</p>
<table>
<thead>
<tr>
<th>客户端个数</th>
<th>请求时间(s)</th>
<th>requests(susceed)</th>
<th>平均每秒请求个数（requests/sec）</th>
</tr>
</thead>
<tbody>
<tr>
<td>500</td>
<td>10</td>
<td>58310</td>
<td>5831</td>
</tr>
<tr>
<td>1000</td>
<td>10</td>
<td>60899</td>
<td>6090</td>
</tr>
<tr>
<td>2000</td>
<td>10</td>
<td>84720</td>
<td>8472</td>
</tr>
<tr>
<td>5000</td>
<td>10</td>
<td>85271</td>
<td>8527</td>
</tr>
</tbody>
</table>
<p><img src="https://tracerzzz.ltd/20180616152912194712214.png" alt="20180616152912194712214.png"></p>
<p>当客户端个数调整到10000的时候，已经可以看到，已经访问不到资源</p>
<h3 id="调整机器配置和nginx配置"><a href="#调整机器配置和nginx配置" class="headerlink" title="调整机器配置和nginx配置"></a>调整机器配置和nginx配置</h3><p>将cpu调整到4核，内存调到2048</p>
<p>nginx配置调整如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>客户端个数</th>
<th>请求时间(s)</th>
<th>requests(susceed)</th>
<th>平均每秒请求个数（requests/sec）</th>
</tr>
</thead>
<tbody>
<tr>
<td>500</td>
<td>10</td>
<td>164548</td>
<td>16454</td>
</tr>
<tr>
<td>1000</td>
<td>10</td>
<td>198593</td>
<td>19859</td>
</tr>
<tr>
<td>2000</td>
<td>10</td>
<td>190463</td>
<td>19046</td>
</tr>
<tr>
<td>5000</td>
<td>10</td>
<td>182662</td>
<td>182662</td>
</tr>
<tr>
<td>10000</td>
<td>10</td>
<td>161927</td>
<td>16192</td>
</tr>
</tbody>
</table>
<p>可以看见，最大的并发为19859，可见传言nginx每秒两万并发并非空穴来风，和论坛里大家的一万八也不相上下，当然这里的请求都是最简单的静态资源请求，没有特别复杂的业务。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>webbench</tag>
      </tags>
  </entry>
  <entry>
    <title>使用scrapy+scrapy-splash爬取网易云音乐歌单</title>
    <url>/2018/05/02/python/scrapy/</url>
    <content><![CDATA[<p><img src="https://tracerzzz.ltd/2018051515263513332302.png" alt="2018051515263513332302.png"></p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrapy startproject music163Scrapy</span><br><span class="line">cd music163Scrapy</span><br><span class="line">scrapy genspider Music163 163.com</span><br></pre></td></tr></table></figure>
<p>文件目录如下：</p>
<p><img src="https://tracerzzz.ltd/20180515152636349896977.png" alt="20180515152636349896977.png"></p>
<h3 id="Items-py"><a href="#Items-py" class="headerlink" title="Items.py"></a>Items.py</h3><p>生成项目目录之后就可以开始编写代码啦，首先修改items.py，定义我们爬取网页后收集的字段。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scrapymusic163Item</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()  <span class="comment"># 标题</span></span><br><span class="line">    link = scrapy.Field()  <span class="comment"># 链接</span></span><br><span class="line">    realLink=scrapy.Field() <span class="comment">#完整连接</span></span><br><span class="line">    desc = scrapy.Field()  <span class="comment"># 简述</span></span><br><span class="line">    listenCount = scrapy.Field() <span class="comment">#播放数量</span></span><br><span class="line">    posttime = scrapy.Field()  <span class="comment"># 发布时间</span></span><br><span class="line">    imgUrl=scrapy.Field()  <span class="comment"># 歌单封面图片url</span></span><br><span class="line">    <span class="comment"># pass</span></span><br></pre></td></tr></table></figure>
<h3 id="Music163Spider"><a href="#Music163Spider" class="headerlink" title="Music163Spider"></a>Music163Spider</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music163Spider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">"music163"</span></span><br><span class="line">    allowed_domains = [<span class="string">"163.com"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"https://music.163.com/discover/playlist/?order=new"</span>,</span><br><span class="line">        <span class="string">"https://music.163.com/#/discover/playlist/"</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> SplashRequest(url=url, callback=self.parseRequest,endpoint=<span class="string">'render.json'</span>, args=&#123;<span class="string">'wait'</span>: <span class="number">1</span>,<span class="string">'html'</span>:<span class="number">1</span>,<span class="string">'iframes'</span>: <span class="number">1</span>,<span class="string">'script'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        iframe_html = response.data[<span class="string">'childFrames'</span>][<span class="number">0</span>][<span class="string">'html'</span>]</span><br><span class="line">        sel = parsel.Selector(iframe_html)</span><br><span class="line">        <span class="comment"># for se in sel.xpath('//div[@class="n-rcmd"]/div[@class="v-hd2"]/div[@class="tab"]/a'):</span></span><br><span class="line">        <span class="keyword">for</span> se <span class="keyword">in</span> sel.xpath(<span class="string">"//div[@id='cateListBox']/div[@class='bd']//a"</span>)[<span class="number">1</span>:]:</span><br><span class="line">            item = Scrapymusic163Item()</span><br><span class="line">            item[<span class="string">'title'</span>] = se.xpath(<span class="string">'text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            item[<span class="string">'link'</span>] = se.xpath(<span class="string">'@href'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            url = response.urljoin(item[<span class="string">'link'</span>])</span><br><span class="line">            <span class="keyword">yield</span> SplashRequest(url,self.parse_gedan,endpoint=<span class="string">'render.json'</span>, args=&#123;<span class="string">'wait'</span>: <span class="number">2</span>,<span class="string">'html'</span>:<span class="number">1</span>,<span class="string">'iframes'</span>: <span class="number">1</span>,<span class="string">'script'</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_gedan</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        iframe_html = response.data[<span class="string">'childFrames'</span>][<span class="number">0</span>][<span class="string">'html'</span>]</span><br><span class="line">        sel = parsel.Selector(iframe_html)</span><br><span class="line">        <span class="keyword">for</span> se <span class="keyword">in</span> sel.xpath(<span class="string">'//ul[@id="m-pl-container"]/li'</span>):</span><br><span class="line">            item = Scrapymusic163Item()</span><br><span class="line">            item[<span class="string">'title'</span>] = se.xpath(<span class="string">'p[@class="dec"]/a/text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            item[<span class="string">'link'</span>] = se.xpath(<span class="string">'p[@class="dec"]/a/@href'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            url=response.urljoin(item[<span class="string">'link'</span>])</span><br><span class="line">            item[<span class="string">'realLink'</span>]=url</span><br><span class="line">            item[<span class="string">'listenCount'</span>]=se.xpath(<span class="string">'div/div/span[@class="nb"]/text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            <span class="keyword">if</span>(item[<span class="string">'listenCount'</span>] <span class="keyword">and</span> <span class="string">"万"</span> <span class="keyword">in</span> item[<span class="string">'listenCount'</span>]):</span><br><span class="line">                item[<span class="string">'listenCount'</span>]=int(item[<span class="string">'listenCount'</span>].replace(<span class="string">"万"</span>,<span class="string">"0000"</span>))</span><br><span class="line">            item[<span class="string">'listenCount'</span>]=int(item[<span class="string">'listenCount'</span>])</span><br><span class="line">            item[<span class="string">'imgUrl'</span>]=se.xpath(<span class="string">'div/img[@class="j-flag"]/@src'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        next_pages = sel.xpath(<span class="string">'//a[@class="zbtn znxt"]'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> next_pages:</span><br><span class="line">            url = response.urljoin(next_pages.xpath(<span class="string">'@href'</span>)[<span class="number">0</span>].extract())</span><br><span class="line">            <span class="keyword">yield</span> SplashRequest(url,self.parse_gedan,endpoint=<span class="string">'render.json'</span>, args=&#123;<span class="string">'wait'</span>: <span class="number">2</span>,<span class="string">'html'</span>:<span class="number">1</span>,<span class="string">'iframes'</span>: <span class="number">1</span>,<span class="string">'script'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>上边这段代码是爬取歌单的关键。这里首先说下爬取的思路，打开网易云的网站，找到歌单连接,歌单分为热门和最新两种，每种又根据风格分为72小类，思路就是先爬取所有种类的连接</p>
<p><img src="https://tracerzzz.ltd/20180515152636458293531.png" alt="20180515152636458293531.png"></p>
<p>再打开每类歌单的网页</p>
<p><img src="https://tracerzzz.ltd/20180515152636639480608.png" alt="20180515152636639480608.png"></p>
<p>从上面的图片中，我们可以看到每首歌的标题,连接，收听次数等信息。</p>
<h3 id="scrapy-splash"><a href="#scrapy-splash" class="headerlink" title="scrapy-splash"></a>scrapy-splash</h3><p>由于网易云的连接嵌套了动态链接的iframe,这里使用了scrapy-splash来动态渲染iframe，相当于让scrapy-splash来执行网页中的js，并将渲染结果返给我们，这样我们就可以继续使用xpath来筛选自己感兴趣的内容了。</p>
<h4 id="docker-部署scrapy-splash"><a href="#docker-部署scrapy-splash" class="headerlink" title="docker 部署scrapy-splash"></a>docker 部署scrapy-splash</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docer pull  scrapinghub/splash</span><br><span class="line"></span><br><span class="line">docker run -p  8050:8050 scrapinghub/splash</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim setting.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SPLASH SERVER</span></span><br><span class="line">SPLASH_URL = <span class="string">'http://127.0.0.1:8050/render.json'</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line"></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure>
<p>详细参见<a href="http://splash.readthedocs.io/en/latest/" target="_blank" rel="noopener">scrapy-splash文档</a></p>
<p>需要注意的是在使用scrapy-splash时需要用SplashRequest来代替scrapy原始的request,这是scrapy-splash对scrapy的request进行了进一步的封装，支持了更多的参数，同时也支持将request的返回配置为不同的格式，如html,json等。这里使用了json返回。</p>
<h4 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h4><p>依赖<a href="https://github.com/sebdah/scrapy-mongodb" target="_blank" rel="noopener">scrapy-mongodb</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">  <span class="string">"scrapy_mongodb.MongoDBPipeline"</span>:<span class="number">900</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MONGODB_URI = <span class="string">'mongodb://root:'</span>+urllib.parse.quote(<span class="string">'MyNewPass+@321'</span>)+<span class="string">'@localhost:27017'</span></span><br><span class="line">MONGODB_DATABASE = <span class="string">'scrapy'</span></span><br><span class="line"><span class="comment"># MONGODB_COLLECTION = 'my_items'</span></span><br><span class="line"><span class="comment"># 连接不重复，避免重复爬取</span></span><br><span class="line">MONGODB_UNIQUE_KEY = <span class="string">'realLink'</span></span><br><span class="line"></span><br><span class="line">MONGODB_SEPARATE_COLLECTIONS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h3><p><img src="https://tracerzzz.ltd/20180515152636644617456.png" alt="20180515152636644617456.png"></p>
<p>共爬取了15万左右的歌单。下面是播放次数最多的五个歌单</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"5aea7a036d5b76bf8d42659d"</span>),</span><br><span class="line">    <span class="attr">"title"</span> : <span class="string">"华语速爆新歌"</span>,</span><br><span class="line">    <span class="attr">"link"</span> : <span class="string">"/playlist?id=924680166"</span>,</span><br><span class="line">    <span class="attr">"realLink"</span> : <span class="string">"https://music.163.com/playlist?id=924680166"</span>,</span><br><span class="line">    <span class="attr">"listenCount"</span> : <span class="number">152900000</span>,</span><br><span class="line">    <span class="attr">"imgUrl"</span> : <span class="string">"http://p1.music.126.net/Zcv4NgK5T0bd1yMzAFp8Iw==/109951163276364917.jpg?param=140y140"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"5aea78a56d5b76bf8d422179"</span>),</span><br><span class="line">    <span class="attr">"title"</span> : <span class="string">"【节奏控】那些超带感的音乐（典藏版）"</span>,</span><br><span class="line">    <span class="attr">"link"</span> : <span class="string">"/playlist?id=306397077"</span>,</span><br><span class="line">    <span class="attr">"realLink"</span> : <span class="string">"https://music.163.com/playlist?id=306397077"</span>,</span><br><span class="line">    <span class="attr">"listenCount"</span> : <span class="number">140930000</span>,</span><br><span class="line">    <span class="attr">"imgUrl"</span> : <span class="string">"http://p1.music.126.net/RnOZHM0BNxXuy-RwQQI5BA==/3313928048221849.jpg?param=140y140"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"5aea7fd16d5b76bf8d43b0db"</span>),</span><br><span class="line">    <span class="attr">"title"</span> : <span class="string">"【旋律控】超级好听的外文歌"</span>,</span><br><span class="line">    <span class="attr">"link"</span> : <span class="string">"/playlist?id=310970433"</span>,</span><br><span class="line">    <span class="attr">"realLink"</span> : <span class="string">"https://music.163.com/playlist?id=310970433"</span>,</span><br><span class="line">    <span class="attr">"listenCount"</span> : <span class="number">101740000</span>,</span><br><span class="line">    <span class="attr">"imgUrl"</span> : <span class="string">"http://p1.music.126.net/2MsstS-M9w5-li0aRy3sUQ==/1380986606815861.jpg?param=140y140"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"5aea95f76d5b76bf8d46289a"</span>),</span><br><span class="line">    <span class="attr">"title"</span> : <span class="string">"那些只听前奏就中毒的英文歌"</span>,</span><br><span class="line">    <span class="attr">"link"</span> : <span class="string">"/playlist?id=37432514"</span>,</span><br><span class="line">    <span class="attr">"realLink"</span> : <span class="string">"https://music.163.com/playlist?id=37432514"</span>,</span><br><span class="line">    <span class="attr">"listenCount"</span> : <span class="number">95420000</span>,</span><br><span class="line">    <span class="attr">"imgUrl"</span> : <span class="string">"http://p1.music.126.net/mQy3lRj6YJ0TW3fM9v85YA==/6643249256145165.jpg?param=140y140"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"5aea789a6d5b76bf8d42194c"</span>),</span><br><span class="line">    <span class="attr">"title"</span> : <span class="string">"【欧美男团】秒杀耳朵系列"</span>,</span><br><span class="line">    <span class="attr">"link"</span> : <span class="string">"/playlist?id=117377955"</span>,</span><br><span class="line">    <span class="attr">"realLink"</span> : <span class="string">"https://music.163.com/playlist?id=117377955"</span>,</span><br><span class="line">    <span class="attr">"listenCount"</span> : <span class="number">71150000</span>,</span><br><span class="line">    <span class="attr">"imgUrl"</span> : <span class="string">"http://p1.music.126.net/FJAxNkFoq3dGiS9tz_bGgQ==/3405187512421439.jpg?param=140y140"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/tracerZzz/music163Scrapy" target="_blank" rel="noopener">https://github.com/tracerZzz/music163Scrapy</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/intro/tutorial.html" target="_blank" rel="noopener">scrapy文档</a></p>
<p><a href="http://splash.readthedocs.io/en/latest/" target="_blank" rel="noopener">scrapy-splash文档</a></p>
<p><a href="https://github.com/sebdah/scrapy-mongodb" target="_blank" rel="noopener">scrapy-mongodb</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2018/04/15/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="https://tracerzzz.ltd/20180514152628079993927.png" alt="20180514152628079993927.png"></p>
<h4 id="放弃修改"><a href="#放弃修改" class="headerlink" title="放弃修改"></a>放弃修改</h4><p>git checkout filename 放弃某个文件修改</p>
<p>git checkout . &amp;&amp; git clean -df  放弃当前目录所有文件的修改</p>
<h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><p>git log </p>
<h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>git reset –hard a2d36837308dcb2f53687abbc43b88096ee39d91 返回到某个节点，不保留修改。</p>
<p>当本地使用reset进行代码回滚的时候，在往远程push的时候需要使用-f  参数</p>
<h4 id="当前状态"><a href="#当前状态" class="headerlink" title="当前状态"></a>当前状态</h4><p>git  status</p>
<h4 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h4><p>git push -f origin master</p>
<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>git merge upstream/master</p>
<h4 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h4><p>—local 为当前项目的配置</p>
<p>—global为全局的配置</p>
<p>git config —local user.name “tracerzzz”</p>
<p>git config —local user.email “<a href="mailto:173439618@qq.com" target="_blank" rel="noopener">173439618@qq.com</a>“</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>通过keepalived搭建Mysql、zabbix双主模式的高可用集群系统</title>
    <url>/2018/03/23/%E6%9E%B6%E6%9E%84/%E9%80%9A%E8%BF%87keepalived%E6%90%AD%E5%BB%BAmysql%E5%8F%8C%E4%B8%BB%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="Mysql双主模式"><a href="#Mysql双主模式" class="headerlink" title="Mysql双主模式"></a>Mysql双主模式</h3><p>mysql双主模式也叫做主主同步或者双主互备，即两台数据库server互为主备。双主模式是在普通的master-slave主备模式下进一步拓展而来的，普通的master-slave主备模式即一主一备，slave主机拉取master主机的Binary log，然后将二进制文件解析为sql语句并完全顺序的执行sql语句所记录的所有操作，从而使slave的数据和master保持一致；双主互备是两台机器互相以对方为master，定时拉取对方的Binary log。双主互备中两台主机都可以进行读写操作，而在普通主备，只有master可以进行写操作，slave只能进行读取操作；</p>
<p><img src="https://tracerzzz.ltd/20180316152118561067778.png" alt="20180316152118561067778.png"></p>
<hr>
<h3 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a>Keepalived</h3><p><a href="http://www.keepalived.org/doc/" target="_blank" rel="noopener">Keepalived</a>是一款高可用软件。keepalived可以让服务器集群共享一个虚拟ip，也就是我们说的vip，同一时间只有一个服务器占有这个虚拟ip，若该服务器不可用或者该服务器的权重小于其他机器，则虚拟IP漂移至另一台服务器并对外提供服务；</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="机器准备（centos7系统）"><a href="#机器准备（centos7系统）" class="headerlink" title="机器准备（centos7系统）"></a>机器准备（centos7系统）</h4><p>两台server:<code>183.57.148.5</code>（<strong>master</strong>）,<code>183.57.148.7</code>(<strong>slave</strong>)</p>
<p>一个vip:<code>183.57.148.23</code></p>
<blockquote>
<p>由于基于vrrp协议，两台server和vip必须处于同一网段</p>
</blockquote>
<h4 id="安装mysql-并初始化密码"><a href="#安装mysql-并初始化密码" class="headerlink" title="安装mysql 并初始化密码"></a>安装mysql 并初始化密码</h4><p>首先登陆master</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install mysql-server</span><br><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>
<p>发现需要输入密码,于是去日志文件里找默认密码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /var/<span class="built_in">log</span>/mysql.log</span><br></pre></td></tr></table></figure>
<p>找到下面一行</p>
<p><code>[Note] A temporary password is generated for root@localhost: i8nk2b*1z,bS</code></p>
<p><code>i8nk2b*1z,bS</code>是初始化的密码，再次使用<code>mysql -h localhost -u root -p</code>登陆</p>
<p>使用以下命令重置root密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'MyNewPass111!'</span>;</span><br></pre></td></tr></table></figure>
<p>登陆slave执行相同的操作</p>
<h3 id="下载zabbix-proxy，导入表结构"><a href="#下载zabbix-proxy，导入表结构" class="headerlink" title="下载zabbix-proxy，导入表结构"></a>下载zabbix-proxy，导入表结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zabbix-proxy-mysql</span><br></pre></td></tr></table></figure>
<p>然后根据<a href="https://www.zabbix.com/documentation/3.4/manual/installation/install_from_packages/rhel_centos" target="_blank" rel="noopener">zabbix文档</a>提示创建数据库表结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> zabbix_proxy <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_bin;</span><br></pre></td></tr></table></figure>
<p>为zabbix_proxy库创建zabbix用户并授权，然后退出（避免使用root登陆特定的数据库）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> zabbix_proxy.* <span class="keyword">to</span> zabbix@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'Zabbix@ctzcdn4321!'</span>;  </span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<p>执行zabbix_proxy自带的sql生成zabbix_proxy表结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-proxy-mysql-3.4.1/schema.sql.gz |mysql -uroot -p zabbix_proxy</span><br></pre></td></tr></table></figure>
<p>这个过程需要耐心等待一会，然后登陆数据库查看表数量 一共140个，如果数量不对，需要drop掉zabbix_proxy重新再生成一次。</p>
<p>最后在slave机器上也执行以上操作。确保两台机器的数据库表结构一致；</p>
<h3 id="修改-etc-my-cnf文件，配置同步"><a href="#修改-etc-my-cnf文件，配置同步" class="headerlink" title="修改/etc/my.cnf文件，配置同步"></a>修改/etc/my.cnf文件，配置同步</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>在[mysqld]下追加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-bin = mysql-bin    #开启binlog日志</span><br><span class="line"></span><br><span class="line">binlog_format = mixed  #基于混合模式,mysql Replication 有三种模式，基于语句，基于行，基于混合模式</span><br><span class="line"></span><br><span class="line">server-id = 1          #server-id master要和slave区分开，master为1 ，slave为2 </span><br><span class="line"></span><br><span class="line">relay-log = relay-bin  # 开启中继日志</span><br><span class="line"></span><br><span class="line">relay-log-index = slave-relay-bin.index #中继日志的索引文件</span><br><span class="line"></span><br><span class="line">auto-increment-increment = 2 #主键自增的幅度，这个要和机器的数量一致</span><br><span class="line"></span><br><span class="line">auto-increment-offset = 1  #从几开始自增，master从1开始自增，每次增加2,即master生成的主键永远为奇数</span><br><span class="line"></span><br><span class="line">replicate-wild-do-table=zabbix_proxy.% #需要同步的表，这里是zabbix_proxy下的所有的表,用通配符%表示</span><br><span class="line"></span><br><span class="line">slave_skip_errors = 1062,1032,1060  #同步时跳过的错误编号，1062，1032，1060</span><br></pre></td></tr></table></figure>
<p>重启mysql<code>sudo systemctl restart mysqld</code></p>
<p>重新登陆mysql,为slave机器授予replication权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'repl_user'</span>@<span class="string">'183.57.148.7'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'MyNewPass111!'</span>;</span><br></pre></td></tr></table></figure>
<p>查看master当前binlog状态信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>
<p><img src="https://tracerzzz.ltd/20180319152143914570938.png" alt="20180319152143914570938.png"></p>
<p>在slaver机器上指定数据库master为183.57.148.5，并指定日志文件名字和位置，这样slaver就知道从哪里开始进行同步了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">change master to master_host=<span class="string">'183.57.148.5'</span>,master_user=<span class="string">'repl_user'</span>,master_password=<span class="string">'MyNewPass111!'</span>,master_log_file=<span class="string">'mysql-bin.000001'</span>,  master_log_pos=154;</span><br></pre></td></tr></table></figure>
<p>开启slaver</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span></span><br></pre></td></tr></table></figure>
<p>接下来在slave机器上进行同样的操作，给maser授予复制权限，然后查看slave机器的binlog状态信息（每个机器的不一定一样，这里和maser的状态一样）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &apos;repl_user&apos;@&apos;183.57.148.4&apos; identified by &apos;MyNewPass111!&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="https://tracerzzz.ltd/20180319152143914570938.png" alt="20180319152143914570938.png"></p>
<p>在master机器上指定数据库master为183.57.148.7,并指定日志文件名字和位置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'183.57.148.7'</span>,master_user=<span class="string">'repl_user'</span>,master_password=<span class="string">'MyNewPass111!'</span>,master_log_file=<span class="string">'mysql-bin.000001'</span>,  master_log_pos=<span class="number">154</span>;</span><br></pre></td></tr></table></figure>
<p>开启slaver</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span></span><br></pre></td></tr></table></figure>
<h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><p>开启3306端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="验证数据库同步"><a href="#验证数据库同步" class="headerlink" title="验证数据库同步"></a>验证数据库同步</h3><p>在两台机器上分别查看slave状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>\G;</span><br></pre></td></tr></table></figure>
<p><img src="https://tracerzzz.ltd/20180322152171000488344.png" alt="20180322152171000488344.png"></p>
<p>必须确保两个参数 Slave_IO_Running，Slave_SQL_Running为Yes</p>
<p>都为yes后创建一个表，测试同步数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`test`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">test</span> <span class="keyword">values</span>();</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure>
<p>在master机器上执行上面的操作,返回结构，</p>
<p><img src="https://tracerzzz.ltd/20180322152171091923913.png" alt="20180322152171091923913.png"></p>
<p>在slave上也执行查询语句<code>select * from test;</code>,返回同样的结果。再在master上执行<code>insert test values();</code>返回结果如下</p>
<p><img src="https://tracerzzz.ltd/20180322152171094816591.png" alt="20180322152171094816591.png"></p>
<p>可以看到master上的所有自增主键都是奇数，接着在slave机器上执行<code>insert test values();</code>语句，结果为123，slave为偶数，从2开始，说明我们的自增配置已经生效，并且也进行了数据同步；</p>
<h3 id="下载安装keepalived"><a href="#下载安装keepalived" class="headerlink" title="下载安装keepalived"></a>下载安装keepalived</h3><p><code>yum install keepalived</code>下载keepalived，keepalived只有一个配置文件，默认位于/etc/keepalived/keepalived.conf</p>
<p>在配置之前先查看本地机器的网卡设置，使用<code>ip a</code>命令,得知当前ip使用的是网卡<strong>eth0</strong>,这个要根据<code>ip a</code>命令执行结果得到。<strong>网卡名称将在接下来的keepalived配置文件和防火墙设置中用到</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id mysql-1</span><br><span class="line">&#125;</span><br><span class="line">#group </span><br><span class="line">vrrp_sync_group VG1 &#123;</span><br><span class="line">      group &#123;</span><br><span class="line">              HA_1</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_mysql &#123;</span><br><span class="line">script /etc/keepalived/bin/check.sh</span><br><span class="line">interval 2   #执行间隔</span><br><span class="line">weight 20    #权重</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance HA_1 &#123;</span><br><span class="line">    state BACKUP  #两个节点最好都设置成BACKUP模式，避免因为意外情况下（比如脑裂）相互抢占导致往两个节点写入相同数据而引发冲突；</span><br><span class="line">    interface eth0  #网卡</span><br><span class="line">    virtual_router_id 51 #两台机器要一致</span><br><span class="line">    priority 100         #初始权重，master机器配置为100，slave配置为90</span><br><span class="line">    nopreempt            #不抢占，当slave机器正常工作时，master恢复正常后不抢占slave的vip</span><br><span class="line">    advert_int 1         #检查间隔，两台机器一致</span><br><span class="line">    authentication &#123; </span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111   #两台一致</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    	183.57.148.23  #vip</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_mysql</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="keepalived的配置文件说明"><a href="#keepalived的配置文件说明" class="headerlink" title="keepalived的配置文件说明"></a>keepalived的配置文件说明</h4><p>vrrp_sync_group的应用场景为：如果路由有2个网段，一个内网，一个外网，每个网段开启一个VRRP实例，假设VRRP配置为检查内网，那么当外网出现问题 时，VRRPD会认为自己是健康的，则不会发送Master和Backup的切换，从而导致问题，Sync Group可以把两个实例都放入Sync Group，这样的话，Group 里任何一个实例出现问题都会发生切换。在这里其实并没有用到group，因为我们只设置了一个实例。</p>
<p>vrrp_instance配置了检测脚本，vip等信息。两台机器的配置基本一致，除了priority参数（master设置为100，slave设置为90）。当master机器keepalivde启动后，将会去执行check.sh，每两秒执行一次，如果执行结果返回零，将在初始权重上加上20，maste的权重将达到120，同理，slave的权重为110（90+20）。这时，vip将漂移到master机器上。如果master上的check.sh执行结果返回1,那么master的权重将不会加20，那么master的权重为100，小于110，此时vip将漂移到slave机器上。keepalived就是这样根据权重的大小进行vip漂移的。另外，需要注意的是，<strong>检测脚本的权重一定要大于两台机器的初始权重</strong>，20&gt;(100-90),因为只有这样，检测脚本检测到服务异常时才能影响到权重的总和。</p>
<p>vrrp_script配置了检测脚本和被检测的服务的权重，以及检测频率等。这里的关键是check.sh的实现。这个脚本这里主要是用来检测mysql是否正常服务，而正常服务的检测可以很简单，也可以很复杂，比如简单的检测msyqld服务是否正常启动，复杂的可以用msyl命令登陆数据库，执行sql语句，查看mysql的状态，进行判断。这里我们只是简单的检测了mysqld服务是否正常启动；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">killall -0 mysqld zabbix_proxy</span><br></pre></td></tr></table></figure>
<p>试了了killall命令，如果没有该命令需要安装<code>sudo yum install psmisc -y</code>,<code>-0</code> 是检测服务正常运行的信号量，如果正常运行返回0，不正常返回1，支持传入多个服务；</p>
<p>同时需要注意的是记得为该脚本授权<code>chmod +x /etc/keepalived/bin/check.sh</code>;</p>
<p><code>sudo vim check.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo killall -0 mysqld zabbix-proxy</span><br></pre></td></tr></table></figure>
<h4 id="Keepalived防火墙设置"><a href="#Keepalived防火墙设置" class="headerlink" title="Keepalived防火墙设置"></a>Keepalived防火墙设置</h4><p>keepalived需要执行下面两条语句，对防火墙进行操作，才能确保两台keepalived能够进行选举,如果没有进行防火墙设置，则会出现两台机器都绑定了vip（脑裂）,原因就是两台机器没法进行通信，无法找到真正的master;</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --<span class="keyword">in</span>-interface eth0 --destination 224.0.0.18 --protocol vrrp -j ACCEPT</span><br><span class="line">sudo firewall-cmd --direct --permanent --add-rule ipv4 filter OUT 0 --out-interface eth0 --destination 224.0.0.18 --protocol vrrp -j ACCEPT</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="启动zabbi-proxy"><a href="#启动zabbi-proxy" class="headerlink" title="启动zabbi-proxy"></a>启动zabbi-proxy</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p><code>vim /etc/zabbix/zabbix_proxy.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ProxyMode=1</span><br><span class="line">Server=124.126.126.143</span><br><span class="line">Hostname=183.57.148.23  #vip</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_proxy.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_proxy.pid</span><br><span class="line">SocketDir=/var/run/zabbix</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix_proxy</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=Zabbix@ctzcdn4321!</span><br><span class="line">HeartbeatFrequency=10</span><br><span class="line">ConfigFrequency=60</span><br><span class="line">DataSenderFrequency=5</span><br><span class="line">StartPollers=50</span><br><span class="line">StartPollersUnreachable=10</span><br><span class="line">StartTrappers=10</span><br><span class="line">StartPingers=10</span><br><span class="line">SNMPTrapperFile=/var/log/snmptrap/snmptrap.log</span><br><span class="line">CacheSize=8G</span><br><span class="line">StartDBSyncers=10</span><br><span class="line">HistoryCacheSize=2G</span><br><span class="line">HistoryIndexCacheSize=2G</span><br><span class="line">Timeout=30</span><br><span class="line">#DebugLevel=4</span><br><span class="line">#ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line">#LogSlowQueries=3000</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启端口</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=10051/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"><span class="comment">#启动zabbix-proxy</span></span><br><span class="line">systemctl start zabbix-proxy</span><br></pre></td></tr></table></figure>
<h4 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable zabbix-proxy</span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>1.查看vip绑定情况 ip a</p>
<p>2.通过连接vip的mysql，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msyql -h 183.57.148.23 -uroot -p</span><br><span class="line">show variables like &quot;%hostname%&quot;;</span><br></pre></td></tr></table></figure>
<p>查看返回的hostaname,就知道了当前连接是哪台机器</p>
<h3 id="MySQL出现同步延迟解决优化方法"><a href="#MySQL出现同步延迟解决优化方法" class="headerlink" title="MySQL出现同步延迟解决优化方法"></a><strong>MySQL出现同步延迟解决优化方法</strong></h3><p>1.主从复制的从库太多导致复制延迟<br>优化：建议从库数量3-5个为宜（具体看自己硬件配置）</p>
<p>2.从库硬件比主库硬件差<br>优化：提升硬件性能</p>
<p>3.慢SQL语句过多<br>优化：SQL语句执行时间太长，需要优化SQL语句（需要联系DBA开发共同商讨优化语句）</p>
<p>4.主从复制的设计问题<br>优化：主从复制单线程，可以通过多线程IO方案解决；另外MySQL5.6.3支持多线程IO复制。</p>
<p>5.主从库之间的网络延迟<br>优化：尽量链路短，提升端口带宽</p>
<p>6.主库读写压力大<br>优化：前端加buffer和缓存。主从延迟不同步（延迟的多少，只要不影响业务就没事）</p>
<p>7、业务设计缺陷导致延迟影响业务<br>优化：从库没有数据改读主库</p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>keepalived</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack快速入门</title>
    <url>/2018/03/08/js/webpack%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="webpack介绍"><a href="#webpack介绍" class="headerlink" title="webpack介绍"></a>webpack介绍</h3><p>截止目前，webpack已经更新到4.0版本，最新版本已经到了v4.1.1(2018-3-8)；这篇文章关于webpack的所有介绍，将基于webpack 的 v4.1.1版本。详细介绍请参考<a href="https://doc.webpack-china.org/concepts/" target="_blank" rel="noopener">中文文档</a>以及<a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">官方文档</a></p>
<p>在详细介绍具体的配置项之前，在这里先说下webpack到底是个什么东西，在我们的项目中究竟发挥着什么作用，以及可以为我们带来什么样的方便。</p>
<p><strong><em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</strong></p>
<p><img src="https://tracerzzz.ltd/20180308152048985612690.png" alt="https://tracerzzz.ltd/20180308152048985612690.png"></p>
<p>说白了，webpack就是一个项目打包工具，他可以将不同的文件通通打入一个或者多个文件。在这个工程中，webpack可以依赖各种loader对不同类型的的文件，进行进一步的操作。比如webpack依赖babel loader对js文件进行es6 es7转码，让你在使用es6 es7新语法的同时还可以将代码运行在比较古老的浏览器中。他还可以利用不同的plugin进行更多操作，比如利用<strong>webpack.optimize.UglifyJsPlugin</strong>去除代码中的空格，将文件最小化。等等，webpack可以干的事情非常的多，他在前端项目工程化中已经在扮演着一个大管家的作用。</p>
<hr>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>webpack是高度可配置的，而配置的项目也不是随意的，webpack中有<strong>四个核心概念</strong></p>
<ul>
<li>入口(entry)</li>
<li>输出(output)</li>
<li>loader</li>
<li>插件(plugins)</li>
</ul>
<p>整个webpack将围绕这四个主要的概念进行配置。</p>
<h4 id="入口-Entry"><a href="#入口-Entry" class="headerlink" title="入口(Entry)"></a>入口(Entry)</h4><p><strong><code>entry</code> 对象是用于 webpack 查找启动并构建 bundle</strong>。这句话可以理解为入口文件就是我们需要打包的文件，入口文件可以是一个也可以是多个。多个入口文件可以应对多页面应用或者用于抽取公共代码或者公用第三方代码库，用于加快首屏加载速度，模块化代码等。</p>
<h4 id="输出-Output"><a href="#输出-Output" class="headerlink" title="输出(Output)"></a>输出(Output)</h4><p><code>output</code> 位于对象最顶级键(key)，包括了一组选项，指示 webpack 如何去输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。</p>
<h4 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h4><p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或”加载”模块时预处理文件。</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install --save-dev ts-loader</span><br></pre></td></tr></table></figure>
<p>然后指示 webpack 对每个 <code>.css</code> 使用 <a href="https://doc.webpack-china.org/loaders/css-loader" target="_blank" rel="noopener"><code>css-loader</code></a>，以及对所有 <code>.ts</code> 文件使用 <a href="https://github.com/TypeStrong/ts-loader" target="_blank" rel="noopener"><code>ts-loader</code></a>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="常用到的loader-vue开发"><a href="#常用到的loader-vue开发" class="headerlink" title="常用到的loader(vue开发)"></a>常用到的loader(vue开发)</h5><ul>
<li>vue-loader         </li>
<li>babel-loader </li>
<li>url-loader</li>
<li>css-loader</li>
<li>less-loader</li>
</ul>
<h4 id="插件-Plugins"><a href="#插件-Plugins" class="headerlink" title="插件(Plugins)"></a>插件(Plugins)</h4><p>插件是 wepback 的<a href="https://github.com/webpack/tapable" target="_blank" rel="noopener">支柱</a>功能。插件在开发环境和生产环境为我们提供了非常多的便利，HtmlWebpackPlugin让我们将js和css文件打包到指定的html文件中，等等，下面列出几个常用的插件。</p>
<ul>
<li>CopyWebpackPlugin //复制文件到打包后的指定目录</li>
<li>DefinePlugin //全局库</li>
<li>CommonsChunkPlugin //重复代码抽取为公共部分 插件</li>
<li>ProvidePlugin //全局变量定义</li>
<li>HotModuleReplacementPlugin 代码热替换</li>
<li>UglifyJsPlugin 代码丑化</li>
</ul>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="resolve-alias-别名"><a href="#resolve-alias-别名" class="headerlink" title="resolve.alias(别名)"></a>resolve.alias(别名)</h4><p>resolve里面有一个alias的配置项目，能够让开发者指定一些模块的引用路径。对一些经常要被import或者require的库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在引入模块的时候可以这样写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Chart <span class="keyword">from</span> <span class="string">'@/components/Charts/keyboard'</span></span><br></pre></td></tr></table></figure>
<h4 id="dev-tool"><a href="#dev-tool" class="headerlink" title="dev-tool"></a>dev-tool</h4><p> <a href="http://blog.teamtreehouse.com/introduction-source-maps" target="_blank" rel="noopener">source mapping</a>用于压缩代码中的错误定位。将压缩后的代码与source code之间匹配一个索引，当压缩代码某处出错时，精确到索引到源代码中的指定行。</p>
<h3 id="iview-admin中的webpack"><a href="#iview-admin中的webpack" class="headerlink" title="iview-admin中的webpack"></a>iview-admin中的webpack</h3><p>项目目录结构如下</p>
<p><img src="https://tracerzzz.ltd/20180309152056457218097.png" alt="20180309152056457218097.png"></p>
<p>项目中webpack配置包含在build目录下，共三个，分别为base，dev，product，代表了基本配置，开发环境配置，生产环境配置。dev和product两个文件都使用了merge方法来将base中基础配置和自己的配置进行合并，这里依赖<code>webpack-merge</code></p>
<h4 id="base配置"><a href="#base配置" class="headerlink" title="base配置"></a>base配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"><span class="keyword">var</span> happyThreadPool = HappyPack.ThreadPool(&#123;</span><br><span class="line">  size: os.cpus().length</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'@/main'</span>,</span><br><span class="line">    <span class="string">'vender-base'</span>: <span class="string">'@/vendors/vendors.base.js'</span>,</span><br><span class="line">    <span class="string">'vender-exten'</span>: <span class="string">'@/vendors/vendors.exten.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist/dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">            less: ExtractTextPlugin.extract(&#123;</span><br><span class="line">              use: [<span class="string">'css-loader?minimize'</span>, <span class="string">'autoprefixer-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">              fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">            &#125;),</span><br><span class="line">            css: ExtractTextPlugin.extract(&#123;</span><br><span class="line">              use: [<span class="string">'css-loader'</span>, <span class="string">'autoprefixer-loader'</span>],</span><br><span class="line">              fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/iview\/.*?js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js[x]?$/</span>,</span><br><span class="line">        include: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'happypack/loader?id=happybabel'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: [<span class="string">'css-loader?minimize'</span>, <span class="string">'autoprefixer-loader'</span>],</span><br><span class="line">          fallback: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: [<span class="string">'css-hot-loader'</span>, <span class="string">'autoprefixer-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">          fallback: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(gif|jpg|png|woff|svg|eot|ttf)\??.*$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader?limit=1024'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/jquery-mousewheel/</span>,</span><br><span class="line">        loader: <span class="string">"imports-loader?define=&gt;false&amp;this=&gt;window"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/malihu-custom-scrollbar-plugin/</span>,</span><br><span class="line">        loader: <span class="string">"imports-loader?define=&gt;false&amp;this=&gt;window"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(html|tpl)$/</span>,</span><br><span class="line">        loader: <span class="string">'html-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      id: <span class="string">'happybabel'</span>,</span><br><span class="line">      loaders: [<span class="string">'babel-loader'</span>],</span><br><span class="line">      threadPool: happyThreadPool,</span><br><span class="line">      cache: <span class="literal">true</span>,</span><br><span class="line">      verbose: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//全局库</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>,</span><br><span class="line">      jQuery: <span class="string">'jquery'</span>,</span><br><span class="line">      <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span>,</span><br><span class="line">      <span class="comment">//_: "lodash",</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'../src'</span>),</span><br><span class="line">      <span class="string">'node_modules'</span>: resolve(<span class="string">'../node_modules'</span>),</span><br><span class="line">      webworkify: <span class="string">'webworkify-webpack-dropin'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="product配置"><a href="#product配置" class="headerlink" title="product配置"></a>product配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> cleanWebpackPlugin([<span class="string">'dist/*'</span>], &#123;</span><br><span class="line">          root: path.resolve(__dirname, <span class="string">'../'</span>)</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">          filename: <span class="string">'[name].[hash].css'</span>,</span><br><span class="line">          allChunks: <span class="literal">true</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">          <span class="comment">// name: 'vendors',</span></span><br><span class="line">          <span class="comment">// filename: 'vendors.[hash].js'</span></span><br><span class="line">          name: [<span class="string">'vender-exten'</span>, <span class="string">'vender-base'</span>],</span><br><span class="line">          minChunks: <span class="literal">Infinity</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">          <span class="string">'process.env'</span>: &#123;</span><br><span class="line">              NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.cleanWebpackPlugin(&#123;</span><br><span class="line">          compress: &#123;</span><br><span class="line">              warnings: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;),</span><br></pre></td></tr></table></figure>
<p>生产环境每次打包都需要将之前生成的文件清除，这里使用了cleanWebpackPlugin插件。另外在生产环境中要将代码尽量压缩到最小化，这里使用了cleanWebpackPlugin插件。</p>
<blockquote>
<p>另外：如果项目使用nginx部署，还可以使用nginx进行压缩</p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解javaScript笔记-编写高质量JavaScript代码的基本要点</title>
    <url>/2018/01/17/js/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javaScript%E7%AC%94%E8%AE%B0-%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJavaScript%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h3 id="最小全局变量-Minimizing-Globals"><a href="#最小全局变量-Minimizing-Globals" class="headerlink" title="最小全局变量(Minimizing Globals)"></a>最小全局变量(Minimizing Globals)</h3><p><strong>JavaScript通过函数管理作用域。在函数内部声明的变量只在这个函数内部，函数外面不可用。</strong></p>
<p>浏览器中的全局变量:this相当于window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.h=<span class="string">"hello"</span></span><br><span class="line"><span class="comment">//"hello"</span></span><br><span class="line"><span class="built_in">window</span>.h</span><br><span class="line"><span class="comment">//"hello"</span></span><br></pre></td></tr></table></figure>
<h3 id="全局变量的问题"><a href="#全局变量的问题" class="headerlink" title="全局变量的问题"></a>全局变量的问题</h3><p>全局变量的问题在于，你的JavaScript应用程序和web页面上的所有代码都共享了这些全局变量，他们住在同一个全局命名空间，所以当程序的两个不同部分定义同名但不同作用的全局变量的时候，命名冲突在所难免。</p>
<h4 id="反例一：不声明的任何变量都会成为一个全局对象属性"><a href="#反例一：不声明的任何变量都会成为一个全局对象属性" class="headerlink" title="反例一：不声明的任何变量都会成为一个全局对象属性"></a>反例一：不声明的任何变量都会成为一个全局对象属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//隐式创建全局变量反例1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 不推荐写法: 隐式全局变量</span></span><br><span class="line">   result = x + y;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="built_in">window</span>.result</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>此段代码中的<code>result</code>没有声明。代码照样运作正常，但在调用函数后你最后的结果就是多一个全局变量result。</p>
<p>经验法则是始终使用var声明变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> result = x + y;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反例二：使用任务链进行部分var声明"><a href="#反例二：使用任务链进行部分var声明" class="headerlink" title="反例二：使用任务链进行部分var声明"></a>反例二：使用任务链进行部分var声明</h4><p>另一个创建隐式全局变量的反例就是使用任务链进行部分var声明。下面的片段中，<code>a</code>是本地变量但是<code>b</code>确实全局变量，这可能不是你希望发生的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = b = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="literal">undefined</span> <span class="comment">//执行foo()返回undefined</span></span><br><span class="line"><span class="built_in">window</span>.b <span class="comment">//发现b其实为全局变量，倒霉</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此现象发生的原因在于这个从右到左的赋值，首先，是赋值表达式<code>b = 0</code>，此情况下b是未声明的。这个表达式的返回值是0，然后这个0就分配给了通过var定义的这个局部变量a。类似于<code>var a = (b = 0);</code></p>
</blockquote>
<p><strong>先准备好声明变量，再使用链分配是比较好的做法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a, b;</span><br><span class="line">   <span class="comment">// ... a = b = 0; // 两个均局部变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="忘记var的副作用-Side-Effects-When-Forgetting-var"><a href="#忘记var的副作用-Side-Effects-When-Forgetting-var" class="headerlink" title="忘记var的副作用(Side Effects When Forgetting var)"></a>忘记var的副作用(Side Effects When Forgetting var)</h3><ul>
<li>通过var创建的全局变量（任何函数之外的程序中创建）是不能被删除的。</li>
<li>无var创建的隐式全局变量（无视是否在函数中创建）是能被删除的。</li>
</ul>
<p>隐式全局变量和明确定义的全局变量间有些小的差异，就是通过<code>delete</code>操作符让变量未定义的能力</p>
<p><strong>这表明，在技术上，隐式全局变量并不是真正的全局变量，但它们是全局对象的属性。属性是可以通过<code>delete</code>操作符删除的，而变量是不能的：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义三个全局变量</span></span><br><span class="line"><span class="keyword">var</span> global_var = <span class="number">1</span>;</span><br><span class="line">global_novar = <span class="number">2</span>; <span class="comment">// 反面教材</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   global_fromfunc = <span class="number">3</span>; <span class="comment">// 反面教材</span></span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 试图删除</span></span><br><span class="line"><span class="keyword">delete</span> global_var; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">delete</span> global_novar; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">delete</span> global_fromfunc; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试该删除</span></span><br><span class="line"><span class="keyword">typeof</span> global_var; <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">typeof</span> global_novar; <span class="comment">// "global_nar is not defined"</span></span><br><span class="line"><span class="keyword">typeof</span> global_fromfunc; <span class="comment">// "global_fromfunc is not defined"</span></span><br></pre></td></tr></table></figure>
<h3 id="单var形式（Single-var-Pattern）"><a href="#单var形式（Single-var-Pattern）" class="headerlink" title="单var形式（Single var Pattern）"></a>单var形式（Single var Pattern）</h3><p>在函数顶部使用单var语句是比较有用的一种形式，其好处在于：</p>
<ul>
<li>提供了一个单一的地方去寻找功能所需要的所有局部变量</li>
<li>防止变量在定义之前使用的逻辑错误</li>
<li>帮助你记住声明的全局变量，因此较少了全局变量//zxx:此处我自己是有点晕乎的…</li>
<li>少代码（类型啊传值啊单线完成）</li>
</ul>
<p>单var形式长得就像下面这个样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">       b = <span class="number">2</span>,</span><br><span class="line">       sum = a + b,</span><br><span class="line">       myobject = &#123;&#125;,</span><br><span class="line">       i,</span><br><span class="line">       j;</span><br><span class="line">   <span class="comment">// function body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量提升（Hoisting）"><a href="#变量提升（Hoisting）" class="headerlink" title="变量提升（Hoisting）"></a>变量提升（Hoisting）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myname = <span class="string">"global"</span>; <span class="comment">// 全局变量,不建议这么写，应该写成 var name = "global"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(myname); <span class="comment">// "undefined"</span></span><br><span class="line">    <span class="keyword">var</span> myname = <span class="string">"local"</span>;</span><br><span class="line">    alert(myname); <span class="comment">// "local"</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br><span class="line"><span class="comment">//alert: undefined</span></span><br><span class="line"><span class="comment">//alert: local</span></span><br></pre></td></tr></table></figure>
<p>上边的代码可以拆分了来理解</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myname = <span class="string">"global"</span>; <span class="comment">// 全局变量,不建议这么写，应该写成 var name = "global"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myname=<span class="literal">undefined</span></span><br><span class="line">    alert(myname); <span class="comment">// "undefined"</span></span><br><span class="line">    myname = <span class="string">"local"</span>;</span><br><span class="line">    alert(myname); <span class="comment">// "local"</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure>
<p>myname变量的声明得到了提升，而在声明的时候是没有被赋值的。在这里还要注意到全局变量和函数内的变量同名，由于js的作用域机制，首先在函数内部找寻找变量，如果没有找到，再去上级（作用域）去找。这里直接找到了，也就不会出现弹出框里显示global的情况。</p>
<h3 id="for循环-for-Loops"><a href="#for循环-for-Loops" class="headerlink" title="for循环(for Loops)"></a>for循环(for Loops)</h3><p>在<code>for</code>循环中，你可以循环取得数组或是数组类似对象的值，譬如<code>arguments</code>和<code>HTMLCollection</code>对象。</p>
<p><code>HTMLCollections</code>指的是DOM方法返回的对象，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByName()</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName()</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName()</span><br><span class="line"><span class="built_in">document</span>.images: 页面上所有的图片元素</span><br><span class="line"><span class="built_in">document</span>.links : 所有a标签元素</span><br><span class="line"><span class="built_in">document</span>.forms : 所有表单</span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].elements : 页面上第一个表单中的所有域</span><br></pre></td></tr></table></figure>
<p>通常的循环形式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 次佳的循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myarray.length; i++) &#123;</span><br><span class="line">   <span class="comment">// 使用myarray[i]做点什么</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这种形式的循环的不足在于每次循环的时候数组的长度都要去获取下。这回降低你的代码，尤其当<code>myarray</code>不是数组，而是一个<code>HTMLCollection</code>对象的时候。</strong>而DOM操作一般都是比较昂贵的。</p>
<p>这就是为什么当你循环获取值时，缓存数组(或集合)的长度是比较好的形式，正如下面代码显示的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = myarray.length; i &lt; max; i++) &#123;</span><br><span class="line">   <span class="comment">// 使用myarray[i]做点什么</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-in循环-for-in-Loops"><a href="#for-in循环-for-in-Loops" class="headerlink" title="for-in循环(for-in Loops)"></a>for-in循环(for-in Loops)</h3><p><strong><code>for-in</code>循环应该用在非数组对象的遍历上，使用<code>for-in</code>进行循环也被称为“枚举”。</strong></p>
<p>从技术上将，你可以使用<code>for-in</code>循环数组（因为JavaScript中数组也是对象），但这是不推荐的。因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。另外，在for-in中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的for循环，对象使用for-in循环。</p>
<h3 id="（不）扩展内置原型-Not-Augmenting-Built-in-Prototypes"><a href="#（不）扩展内置原型-Not-Augmenting-Built-in-Prototypes" class="headerlink" title="（不）扩展内置原型((Not) Augmenting Built-in Prototypes)"></a>（不）扩展内置原型((Not) Augmenting Built-in Prototypes)</h3><p>扩增构造函数的prototype属性是个很强大的增加功能的方法，但有时候它太强大了</p>
<p>增加内置的构造函数原型（如Object(), Array(), 或Function()）挺诱人的，但是这严重降低了可维护性，因为它让你的代码变得难以预测。使用你代码的其他开发人员很可能更期望使用内置的 JavaScript方法来持续不断地工作，而不是你另加的方法。</p>
<p>另外，属性添加到原型中，可能会导致不使用hasOwnProperty属性时在循环中显示出来，这会造成混乱。</p>
<p>因此，不增加内置原型是最好的。你可以指定一个规则，仅当下面的条件均满足时例外：</p>
<ul>
<li><p>可以预期将来的ECMAScript版本或是JavaScript实现将一直将此功能当作内置方法来实现。例如，你可以添加ECMAScript 5中描述的方法，一直到各个浏览器都迎头赶上。这种情况下，你只是提前定义了有用的方法。</p>
</li>
<li><p>如果您检查您的自定义属性或方法已不存在——也许已经在代码的其他地方实现或已经是你支持的浏览器JavaScript引擎部分。</p>
</li>
<li><p>你清楚地文档记录并和团队交流了变化。</p>
</li>
</ul>
<p>如果这三个条件得到满足，你可以给原型进行自定义的添加，形式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.protoype.myMethod !== <span class="string">"function"</span>) &#123;</span><br><span class="line">   <span class="built_in">Object</span>.protoype.myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 实现...</span></span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch模式-switch-Pattern"><a href="#switch模式-switch-Pattern" class="headerlink" title="switch模式(switch Pattern)"></a>switch模式(switch Pattern)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inspect_me = <span class="number">0</span>,</span><br><span class="line">    result = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">switch</span> (inspect_me) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">   result = <span class="string">"zero"</span>;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   result = <span class="string">"one"</span>;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">   result = <span class="string">"unknown"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个简单的例子中所遵循的风格约定如下：</p>
<ul>
<li>每个case和switch对齐（花括号缩进规则除外）</li>
<li>每个case中代码缩进</li>
<li><strong>每个case以break清除结束</strong></li>
<li><strong>避免贯穿（故意忽略break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的。</strong></li>
<li><strong>以default结束switch：确保总有健全的结果，即使无情况匹配。</strong></li>
</ul>
<h3 id="避免隐式类型转换-Avoiding-Implied-Typecasting"><a href="#避免隐式类型转换-Avoiding-Implied-Typecasting" class="headerlink" title="避免隐式类型转换(Avoiding Implied Typecasting )"></a>避免隐式类型转换(Avoiding Implied Typecasting )</h3><p>JavaScript的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：false == 0 或 “” == 0 返回的结果是true。为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用===和!==操作符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (zero === <span class="literal">false</span>) &#123;</span><br><span class="line">   <span class="comment">// 不执行，因为zero为0, 而不是false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反面示例</span></span><br><span class="line"><span class="keyword">if</span> (zero == <span class="literal">false</span>) &#123;</span><br><span class="line">   <span class="comment">// 执行了...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="parseInt-下的数值转换-Number-Conversions-with-parseInt"><a href="#parseInt-下的数值转换-Number-Conversions-with-parseInt" class="headerlink" title="parseInt()下的数值转换(Number Conversions with parseInt())"></a>parseInt()下的数值转换(Number Conversions with parseInt())</h3><p>使用parseInt()进行转换时，加上第二个参数，即标明转换进制。</p>
<h3 id="分隔单词-Separating-Words"><a href="#分隔单词-Separating-Words" class="headerlink" title="分隔单词(Separating Words)"></a>分隔单词(Separating Words)</h3><p>当你的变量或是函数名有多个单词的时候，最好单词的分离遵循统一的规范，有一个常见的做法被称作“驼峰(Camel)命名法”，就是单词小写，每个单词的首字母大写。</p>
<p>对于构造函数，可以使用大驼峰式命名法(upper camel case)，如<code>MyConstructor()</code>。对于函数和方法名称，你可以使用小驼峰式命名法(lower camel case)，像是<code>myFunction(), calculateArea()</code>和<code>getFirstName()</code>。</p>
<p>开发者通常使用小驼峰式命名法，但还有另外一种做法就是所有单词小写以下划线连接：例如，<code>first_name, favorite_bands,</code>和<code>old_company_name</code>，这种标记法帮你直观地区分函数和其他标识——原型和对象。</p>
<p>参考连接：<a href="http://www.cnblogs.com/TomXu/archive/2011/12/28/2286877.html" target="_blank" rel="noopener">http://www.cnblogs.com/TomXu/archive/2011/12/28/2286877.html</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用</title>
    <url>/2018/01/15/nginx/nginx%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="nginx手动编译（centos7）"><a href="#nginx手动编译（centos7）" class="headerlink" title="nginx手动编译（centos7）"></a>nginx手动编译（centos7）</h3><p>1.查看最新稳定版本连接  <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p>
<p>2.wget 最新稳定版 wget <a href="http://nginx.org/download/nginx-1.12.2.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.12.2.tar.gz</a></p>
<p>3.解压文件 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>5.依赖 pcre  pcre-devel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install pcre.x86_64 &amp;&amp; yum -y install pcre-devel.x86_64</span><br></pre></td></tr></table></figure>
<p>6.依赖 zlib 和zlib-devel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y zlib.x86_64 &amp;&amp; yum install -y zlib-devel.x86_64</span><br></pre></td></tr></table></figure>
<p>7.配置</p>
<p>—with-debug 启用debug</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --sbin-path=/usr/<span class="built_in">local</span>/sbin/ --prefix=/usr/<span class="built_in">local</span>/nginx --with-debug</span><br></pre></td></tr></table></figure>
<p>增加nginx-rtmp-module</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --sbin-path=/usr/sbin/ --prefix=/usr/local/nginx  --add-module=../../nginx-rtmp-module  --with-debug</span><br></pre></td></tr></table></figure>
<p>8.make &amp; make install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><ol>
<li>nginx -t 测试配置文件</li>
<li>nginx -s reload 重启</li>
<li>nginx -s quit 退出</li>
<li>nginx -V 查看ngixn安装了哪些模块</li>
</ol>
<h3 id="gzip配置"><a href="#gzip配置" class="headerlink" title="gzip配置"></a>gzip配置</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line"><span class="comment">#gzip_http_version 1.0;</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml application/javascript application/octet-stream text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>;</span><br></pre></td></tr></table></figure>
<h3 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h3><p><strong>UV（Unique visitor）</strong></p>
<p>是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次。</p>
<p>一天内同个访客多次访问仅计算一个UV。</p>
<p><strong>IP（Internet Protocol）</strong></p>
<p>独立IP是指访问过某站点的IP总数，以用户的IP地址作为统计依据。00:00-24:00内相同IP地址之被计算一次。</p>
<p><strong>UV与IP区别</strong>：</p>
<p>如：你和你的家人用各自的账号在同一台电脑上登录新浪微博，则IP数+1，UV数+2。由于使用的是同一台电脑，所以IP不变，但使用的不同账号，所以UV+2</p>
<p><strong>PV（Page View）</strong><br>即页面浏览量或点击量，用户每1次对网站中的每个网页访问均被记录1个PV。用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。</p>
<p><strong>VV（Visit View）</strong><br>用以统计所有访客1天内访问网站的次数。当访客完成所有浏览并最终关掉该网站的所有页面时便完成了一次访问，同一访客1天内可能有多次访问行为，访问次数累计。</p>
<p><strong>PV与VV区别：</strong><br>如：你今天10点钟打开了百度，访问了它的三个页面；11点钟又打开了百度，访问了它的两个页面，则PV数+5，VV数+2.<br>PV是指页面的浏览次数，VV是指你访问网站的次数。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iterm2自定义命令快速部署hexo博客</title>
    <url>/2018/01/14/iterm2/iterm2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>环境：iTerm+zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"alias hexod='hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意双引号中的单引号</p>
</blockquote>
<p>在hexo博客目录下执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexod</span><br></pre></td></tr></table></figure>
<p>以此类推，我们可以在<code>~/.bash_profile</code>文件中添加自定义命令</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>需要注意的是，如果默认是用的zsh的活，每次打开iterm2都要手动的srouce ~/.bash_profile才能生效，比较麻烦</p>
<p>如果你的默认shell是<code>bash</code> ，那么把</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">. ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>追加到 <code>~/.bashrc</code> 末尾, bash开启时会自动执行<code>.bashrc</code>这个文件</p>
<p>如果是其他的 比如 <code>zsh</code>， 那么追加到 <code>~/.zshrc</code> 末尾</p>
<p>其他类推。。。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>iterm2</tag>
      </tags>
  </entry>
  <entry>
    <title>java元注解</title>
    <url>/2016/12/06/java/java%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><img src="https://tracerzzz.ltd/2018031215208216305763.png" alt></p>
<h3 id="元注解（修饰注解的注解）"><a href="#元注解（修饰注解的注解）" class="headerlink" title="元注解（修饰注解的注解）"></a>元注解（修饰注解的注解）</h3><table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>@interface</td>
<td>使用 @interface 关键字声明一个注解</td>
<td></td>
</tr>
<tr>
<td>@Inherited</td>
<td>@Inherited：允许子类继承父类的注解。</td>
<td></td>
</tr>
<tr>
<td>@Retention</td>
<td>这种类型的注解会被保留到哪个阶段</td>
<td></td>
</tr>
<tr>
<td>@Documented</td>
<td>注解表明这个注解应该被 javadoc工具记录.</td>
<td></td>
</tr>
<tr>
<td>@Target</td>
<td>注解的作用目标</td>
</tr>
</tbody>
</table>
<h3 id="元注解源码"><a href="#元注解源码" class="headerlink" title="元注解源码"></a>元注解源码</h3><h4 id="Target和ElementType枚举"><a href="#Target和ElementType枚举" class="headerlink" title="Target和ElementType枚举"></a>Target和ElementType枚举</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line">    <span class="comment">/** Parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Retention注解源码和RetentionPolicy枚举"><a href="#Retention注解源码和RetentionPolicy枚举" class="headerlink" title="Retention注解源码和RetentionPolicy枚举"></a>Retention注解源码和RetentionPolicy枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建一个注解"><a href="#创建一个注解" class="headerlink" title="创建一个注解"></a>创建一个注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 下划线转换驼峰注解  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Inherited</span>  </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConvertHump &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CallerSensitive"><a href="#CallerSensitive" class="headerlink" title="@CallerSensitive"></a>@CallerSensitive</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123; java.lang.annotation.ElementType.METHOD &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CallerSensitive &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个注解是为了堵住漏洞用的。曾经有黑客通过构造双重反射来提升权限，原理是当时反射只检查固定深度的调用者的类，看它有没有特权，例如固定看两层的调用者（getCallerClass(2)）。如果我的类本来没足够权限群访问某些信息，那我就可以通过双重反射去达到目的：反射相关的类是有很高权限的，而在 我-&gt;反射1-&gt;反射2 这样的调用链上，反射2检查权限时看到的是反射1的类，这就被欺骗了，导致安全漏洞。使用CallerSensitive后，getCallerClass不再用固定深度去寻找actual caller（“我”），而是把所有跟反射相关的接口方法都标注上CallerSensitive，搜索时凡看到该注解都直接跳过，这样就有效解决了前面举例的问题</p>
<p>​    </p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构java代码实现笔记文档</title>
    <url>/2016/12/06/java/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="单链表的反转"><a href="#单链表的反转" class="headerlink" title="单链表的反转"></a>单链表的反转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建单链表节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"><span class="comment">//元素，和下一个listnode</span></span><br><span class="line"><span class="keyword">public</span> Object element;</span><br><span class="line"><span class="keyword">public</span> ListNode next;</span><br><span class="line"><span class="comment">//构造方法1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(Object element)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(element, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造方法2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(Object element,ListNode n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.element=element;</span><br><span class="line">   <span class="keyword">this</span>.next=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在反转当前节点之前先反转后续节点     </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverse1</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">null</span>==head||head.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">   &#125;</span><br><span class="line">   ListNode reverseNode =reverse1(head.getNext());</span><br><span class="line">   head.getNext().setNext(head);</span><br><span class="line">   head.setNext(<span class="keyword">null</span>);</span><br><span class="line">   <span class="keyword">return</span> reverseNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 遍历实现</span></span><br><span class="line"><span class="comment">* 遍历，将当前节点的下一个节点缓存后更改当前节点指针  </span></span><br><span class="line"><span class="comment">*   </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverse2</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">null</span>==head||head.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">     &#125;</span><br><span class="line">     ListNode pre =head;</span><br><span class="line">     ListNode cur =head.getNext();</span><br><span class="line">     ListNode next;</span><br><span class="line">     <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        next=cur.getNext();</span><br><span class="line">        cur.setNext(pre);</span><br><span class="line">        pre=cur;</span><br><span class="line">        cur=next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//将原链表的头节点的下一个节点置为null，再将反转后的头节点赋给head </span></span><br><span class="line">     head.setNext(<span class="keyword">null</span>);</span><br><span class="line">     head=pre;</span><br><span class="line">     <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序大的分类可以分为两种：内排序和外排序。在排序过程中，全部记录存放在内存，则称为内排序，如果排序过程中需要使用外存，则称为外排序。下面讲的排序都是属于内排序。</p>
<p>　　内排序有可以分为以下几类：</p>
<p>　　(1)、插入排序：直接插入排序、二分法插入排序、希尔排序。</p>
<p>　　(2)、选择排序：简单选择排序、堆排序。</p>
<p>　　(3)、交换排序：冒泡排序、快速排序。</p>
<p>　　(4)、归并排序</p>
<p>　　(5)、基数排序</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>思想：每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置，直到全部插入排序完为止。<br>关键问题：在前面已经排好序的序列中找到合适的插入位置。<br>方法：</p>
<ul>
<li><p>直接插入排序</p>
</li>
<li><p>二分插入排序</p>
</li>
<li>希尔排序</li>
</ul>
<h5 id="①直接插入排序（从后向前找到合适位置后插入）"><a href="#①直接插入排序（从后向前找到合适位置后插入）" class="headerlink" title="①直接插入排序（从后向前找到合适位置后插入）"></a>①直接插入排序（从后向前找到合适位置后插入）</h5><p>　　1、基本思想：每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。</p>
<p>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056800556014.png" alt="图解"><br>3、java实现<br>​<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">1</span>&#125;;</span><br><span class="line">     System.out.println(<span class="string">"排序之前："</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">         System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">         System.out.println(a.length+<span class="string">""</span>);</span><br><span class="line">     &#125;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">   <span class="comment">//从第二个开始比较</span></span><br><span class="line">   <span class="keyword">int</span> temp=a[i];</span><br><span class="line">   <span class="keyword">int</span> j;</span><br><span class="line">   <span class="comment">//往前边遍历</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">         <span class="keyword">if</span>(a[j]&gt;a[i])&#123;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//跳出for</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//因为j在for的时候进行了--操作，所以在这里要进行+1</span></span><br><span class="line">   a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4、分析</p>
<p>　　直接插入排序是稳定的排序。关于各种算法的稳定性分析可以参考<a href="http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html" target="_blank" rel="noopener">http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html</a></p>
<p>　　文件初态不同时，直接插入排序所耗费的时间有很大差异。若文件初态为正序，则每个待插入的记录只需要比较一次就能够找到合适的位置插入，故算法的时间复杂度为O(n)，这时最好的情况。若初态为反序，则第i个待插入记录需要比较i+1次才能找到合适位置插入，故时间复杂度为O(n2)，这时最坏的情况。</p>
<p>　　直接插入排序的平均时间复杂度为O(n2)。</p>
<h5 id="②二分法插入排序（按二分法找到合适位置插入）"><a href="#②二分法插入排序（按二分法找到合适位置插入）" class="headerlink" title="②二分法插入排序（按二分法找到合适位置插入）"></a>②二分法插入排序（按二分法找到合适位置插入）</h5><p>1、基本思想：二分法插入排序的思想和直接插入一样，只是找合适的插入位置的方式不同，这里是按二分法找到合适的位置，可以减少比较的次数。</p>
<p>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056804331117.png" alt="实例"><br>3、java实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">   <span class="comment">//循环</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">         <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">int</span> temp=a[i];</span><br><span class="line">         <span class="keyword">int</span> right=i-<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line">         <span class="comment">//循环，直至找到最接近a[i]的a[left]</span></span><br><span class="line">         <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;a[mid])&#123;</span><br><span class="line">               right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//从a[left]到a[i-1]往右移动</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=left;j--)&#123;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//将a[i]赋值给a[left]</span></span><br><span class="line">         <span class="keyword">if</span>(left!=i)&#123;</span><br><span class="line">            a[left]=temp;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>4、分析</p>
<p>　　当然，二分法插入排序也是稳定的。</p>
<p>　　二分插入排序的比较次数与待排序记录的初始状态无关，仅依赖于记录的个数。当n较大时，比直接插入排序的最大比较次数少得多。但大于直接插入排序的最小比较次数。算法的移动次数与直接插入排序算法的相同，最坏的情况为n2/2，最好的情况为n，平均移动次数为O(n2)。</p>
<h5 id="③希尔排序"><a href="#③希尔排序" class="headerlink" title="③希尔排序"></a>③希尔排序</h5><p>1、基本思想：先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为d1的倍数的记录放在同一个组中。先在各组内进行直接插入排序；然后，取第二个增量d2&lt; d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt; dt-l&lt;… &lt; d2 &lt; d1)，即所有记录放在同一组中进行直接插入排序为止。该方法实质上是一种分组插入方法。<br>2、实例<br><img src="https://tracerzzz.ltd/20180309152056806667894.png" alt="实例"><br><img src="https://tracerzzz.ltd/20180309152056808742260.png" alt="实例2"><br>3、java实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort4</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d=a.length;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">       d=d/<span class="number">2</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;d;x++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=x+d;i&lt;a.length;i=i+d)&#123;</span><br><span class="line">            <span class="comment">//进行小组内的插入排序</span></span><br><span class="line">             <span class="keyword">int</span> temp=a[i];</span><br><span class="line">             <span class="keyword">int</span> j;</span><br><span class="line">             <span class="keyword">for</span>( j=i-d;j&gt;=<span class="number">0</span>&amp;&amp;a[j]&gt;temp;j=j-d)&#123;</span><br><span class="line">                a[j+d]=a[j];</span><br><span class="line">             &#125;</span><br><span class="line">             a[j+d]=temp;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(d==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      System.out.println(<span class="string">"排序之后："</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">              System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">          &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>4、分析</p>
<p>　　我们知道一次插入排序是稳定的，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不稳定的。</p>
<p>　　希尔排序的时间性能优于直接插入排序，原因如下：</p>
<p>　　（1）当文件初态基本有序时直接插入排序所需的比较和移动次数均较少。<br>　　（2）当n值较小时，n和n2的差别也较小，即直接插入排序的最好时间复杂度O(n)和最坏时间复杂度0(n2)差别不大。<br>　　（3）在希尔排序开始时增量较大，分组较多，每组的记录数目少，故各组内直接插入较快，后来增量di逐渐缩小，分组数逐渐减少，而各组的记录数目逐渐增多，但由于已经按di-1作为距离排过序，使文件较接近于有序状态，所以新的一趟排序过程也较快。<br>　　因此，希尔排序在效率上较直接插人排序有较大的改进。<br>　　希尔排序的平均时间复杂度为O(nlogn)。</p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>思想：每趟从待排序的记录序列中选择关键字最小的记录放置到已排序表的最前位置，直到全部排完。<br>关键问题：在剩余的待排序记录序列中找到最小关键码记录。<br>方法：</p>
<ul>
<li><p>–直接选择排序</p>
</li>
<li><p>–堆排序</p>
</li>
</ul>
<h5 id="①简单的选择排序"><a href="#①简单的选择排序" class="headerlink" title="①简单的选择排序"></a>①简单的选择排序</h5><p>　　1、基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。<br>　　<br>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056813399678.png" alt="实例"><br>3、java实现<br>​<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort4</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">int</span> temp=a[i];</span><br><span class="line">     <span class="keyword">int</span> j;</span><br><span class="line">     <span class="keyword">int</span> index=i;</span><br><span class="line">     <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[index]&gt;a[j])&#123;</span><br><span class="line">        <span class="comment">//找出最小元素的下标</span></span><br><span class="line">        index=j;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     a[i]=a[index];</span><br><span class="line">     a[index]=temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4、分析</p>
<p>　　简单选择排序是不稳定的排序。</p>
<p>　　时间复杂度：T(n)=O(n2)。</p>
<h5 id="②堆排序"><a href="#②堆排序" class="headerlink" title="②堆排序"></a>②堆排序</h5><p>　　1、基本思想：</p>
<p>　　堆排序是一种树形选择排序，是对直接选择排序的有效改进。</p>
<p>　　堆的定义下：具有n个元素的序列 （h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二 叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。</p>
<p>　　思想:初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个 堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对 它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p>
<p>　　2、实例</p>
<p>初始序列：46,79,56,38,40,84</p>
<p>　　建堆：<br><img src="https://tracerzzz.ltd/20180309152056814866459.png" alt="jiandui"><br>交换，从堆中踢出最大数<br><img src="https://tracerzzz.ltd/20180309152056816318431.png" alt="d"><br>依次类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。</p>
<p>　　3、java实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a )</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> arrayLength=a.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrayLength-<span class="number">1</span>;i--)&#123;</span><br><span class="line">     buildMaxHeap(a,arrayLength-<span class="number">1</span>-i);  </span><br><span class="line">          <span class="comment">//交换堆顶和最后一个元素  </span></span><br><span class="line">          swap(a,<span class="number">0</span>,arrayLength-<span class="number">1</span>-i);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//对data数组从0到lastIndex建大顶堆</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span></span>&#123;</span><br><span class="line">       <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始 </span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">          <span class="comment">//k保存正在判断的节点 </span></span><br><span class="line">          <span class="keyword">int</span> k=i;</span><br><span class="line">          <span class="comment">//如果当前k节点的子节点存在  </span></span><br><span class="line">          <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</span><br><span class="line">              <span class="comment">//k节点的左子节点的索引 </span></span><br><span class="line">              <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">              <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span></span><br><span class="line">              <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;  </span><br><span class="line">                  <span class="comment">//若果右子节点的值较大  </span></span><br><span class="line">                  <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;  </span><br><span class="line">                      <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></span><br><span class="line">                      biggerIndex++;  </span><br><span class="line">                  &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">              <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></span><br><span class="line">              <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;  </span><br><span class="line">                  <span class="comment">//交换他们  </span></span><br><span class="line">                  swap(data,k,biggerIndex);  </span><br><span class="line">                  <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></span><br><span class="line">                  k=biggerIndex;  </span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                  <span class="keyword">break</span>;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//交换</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">int</span> tmp=data[i];  </span><br><span class="line">      data[i]=data[j];  </span><br><span class="line">      data[j]=tmp;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>4、分析</p>
<p>　　堆排序也是一种不稳定的排序算法。</p>
<p>　　堆排序优于简单选择排序的原因：</p>
<p>　　直接选择排序中，为了从R[1..n]中选出关键字最小的记录，必须进行n-1次比较，然后在R[2..n]中选出关键字最小的记录，又需要做n-2次比较。事实上，后面的n-2次比较中，有许多比较可能在前面的n-1次比较中已经做过，但由于前一趟排序时未保留这些比较结果，所以后一趟排序时又重复执行了这些比较操作。</p>
<p>　　堆排序可通过树形结构保存部分比较结果，可减少比较次数。</p>
<p>　　堆排序的最坏时间复杂度为O(nlogn)。堆序的平均性能较接近于最坏性能。由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。</p>
<h4 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h4><h5 id="①冒泡排序"><a href="#①冒泡排序" class="headerlink" title="①冒泡排序"></a>①冒泡排序</h5><p>　　1、基本思想：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>
<p>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056818095160.png" alt="shili"><br>3、java实现<br>​<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">sort5</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a[j];</span><br><span class="line">        a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">        a[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">"冒泡排序之后："</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">      System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　4、分析</p>
<p>　　冒泡排序是一种稳定的排序方法。　</p>
<p>若文件初状为正序，则一趟起泡就可完成排序，排序码的比较次数为n-1，且没有记录移动，时间复杂度是O(n)<br>若文件初态为逆序，则需要n-1趟起泡，每趟进行n-i次排序码的比较，且每次比较都移动三次，比较和移动次数均达到最大值∶O(n2)<br>起泡排序平均时间复杂度为O(n2)</p>
<h5 id="②快速排序"><a href="#②快速排序" class="headerlink" title="②快速排序"></a>②快速排序</h5><p>　　1、基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。<br>　　<br>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056819326884.png" alt="实例"><br>3、java实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(a.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">          quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">      &#125;      </span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">      System.out.println(<span class="string">"快速排序之后："</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">          System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//递归</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(low&lt;high)&#123; <span class="comment">//如果不加这个判断递归会无法退出导致堆栈溢出异常</span></span><br><span class="line">          <span class="keyword">int</span> middle = getMiddle(a,low,high);</span><br><span class="line">          quickSort(a, <span class="number">0</span>, middle-<span class="number">1</span>);</span><br><span class="line">          quickSort(a, middle+<span class="number">1</span>, high);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> temp = a[low];<span class="comment">//基准元素</span></span><br><span class="line">      <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">          <span class="comment">//找到比基准元素小的元素位置</span></span><br><span class="line">          <span class="keyword">while</span>(low&lt;high &amp;&amp; a[high]&gt;=temp)&#123;</span><br><span class="line">              high--;</span><br><span class="line">          &#125;</span><br><span class="line">          a[low] = a[high]; </span><br><span class="line">          <span class="keyword">while</span>(low&lt;high &amp;&amp; a[low]&lt;=temp)&#123;</span><br><span class="line">              low++;</span><br><span class="line">          &#125;</span><br><span class="line">          a[high] = a[low];</span><br><span class="line">      &#125;</span><br><span class="line">      a[low] = temp;</span><br><span class="line">      <span class="keyword">return</span> low;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>4、分析</p>
<p>　　快速排序是不稳定的排序。</p>
<p>　　快速排序的时间复杂度为O(nlogn)。</p>
<p>　　当n较大时使用快排比较好，当序列基本有序时用快排反而不好。</p>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>　　1、基本思想:归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p>
<p>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056820692487.png" alt="实例"><br>3、java实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//对左边进行递归</span></span><br><span class="line">        mergeSort(a, left, middle);</span><br><span class="line">        <span class="comment">//对右边进行递归</span></span><br><span class="line">        mergeSort(a, middle+<span class="number">1</span>, right);</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        merge(a,left,middle,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] tmpArr = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">    <span class="keyword">int</span> mid = middle+<span class="number">1</span>; <span class="comment">//右边的起始位置</span></span><br><span class="line">    <span class="keyword">int</span> tmp = left;</span><br><span class="line">    <span class="keyword">int</span> third = left;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=middle &amp;&amp; mid&lt;=right)&#123;</span><br><span class="line">        <span class="comment">//从两个数组中选取较小的数放入中间数组</span></span><br><span class="line">        <span class="keyword">if</span>(a[left]&lt;=a[mid])&#123;</span><br><span class="line">            tmpArr[third++] = a[left++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tmpArr[third++] = a[mid++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将剩余的部分放入中间数组</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;=middle)&#123;</span><br><span class="line">        tmpArr[third++] = a[left++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mid&lt;=right)&#123;</span><br><span class="line">        tmpArr[third++] = a[mid++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将中间数组复制回原数组</span></span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;=right)&#123;</span><br><span class="line">        a[tmp] = tmpArr[tmp++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、分析</p>
<p>　　归并排序是稳定的排序方法。</p>
<p>　　归并排序的时间复杂度为O(nlogn)。</p>
<p>　　速度仅次于快速排序，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列。</p>
<h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><p>　　1、基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p>
<p>　　2、实例<br><img src="https://tracerzzz.ltd/20180309152056822169138.png" alt><br>3、java实现<br>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//找到最大数，确定要排序几趟</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(max&lt;array[i])&#123;</span><br><span class="line">            max = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断位数</span></span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(max&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        max = max/<span class="number">10</span>;</span><br><span class="line">        times++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建立十个队列</span></span><br><span class="line">    List&lt;ArrayList&gt; queue = <span class="keyword">new</span> ArrayList&lt;ArrayList&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ArrayList queue1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        queue.add(queue1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行times次分配和收集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">        <span class="comment">//分配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = array[j]%(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i+<span class="number">1</span>)/(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i);</span><br><span class="line">            ArrayList queue2 = queue.get(x);</span><br><span class="line">            queue2.add(array[j]);</span><br><span class="line">            queue.set(x,queue2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//收集</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(queue.get(j).size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; queue3 = queue.get(j);</span><br><span class="line">                array[count] = queue3.get(<span class="number">0</span>);</span><br><span class="line">                queue3.remove(<span class="number">0</span>);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>　　基数排序是稳定的排序算法。</p>
<p>　　基数排序的时间复杂度为O(d(n+r)),d为位数，r为基数。<br>总结：</p>
<h5 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性:"></a>稳定性:</h5><p>　   稳定：冒泡排序、插入排序、归并排序和基数排序</p>
<p>　　不稳定：选择排序、快速排序、希尔排序、堆排序</p>
<h5 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h5><p>　　O(n^2):直接插入排序，简单选择排序，冒泡排序。</p>
<p>　　在数据规模较小时（9W内），直接插入排序，简单选择排序差不多。当数据较大时，冒泡排序算法的时间代价最高。性能为O(n^2)的算法基本上是相邻元素进行比较，基本上都是稳定的。</p>
<p>　　O(nlogn):快速排序，归并排序，希尔排序，堆排序。</p>
<p>　　其中，快排是最好的， 其次是归并和希尔，堆排序在数据量很大时效果明显。</p>
<h5 id="排序算法的选择"><a href="#排序算法的选择" class="headerlink" title="排序算法的选择"></a>排序算法的选择</h5><h6 id="1-数据规模较小"><a href="#1-数据规模较小" class="headerlink" title="　　1.数据规模较小"></a>　　1.数据规模较小</h6><p>​        待排序列基本序的情况下，可以选择直接插入排序；</p>
<p>​        对稳定性不作要求宜用简单选择排序，对稳定性有要求宜用插入或冒泡</p>
<h6 id="2-数据规模不是很大"><a href="#2-数据规模不是很大" class="headerlink" title="　　2.数据规模不是很大"></a>　　2.数据规模不是很大</h6><p>​        完全可以用内存空间，序列杂乱无序，对稳定性没有要求，快速排序，此时要付出log（N）的额外空间。</p>
<p>​        序列本身可能有序，对稳定性有要求，空间允许下，宜用归并排序</p>
<h6 id="3-数据规模很大"><a href="#3-数据规模很大" class="headerlink" title="　　3.数据规模很大"></a>　　3.数据规模很大</h6><pre><code>对稳定性有求，则可考虑归并排序。

对稳定性没要求，宜用堆排序
</code></pre><h6 id="4-序列初始基本有序（正序），宜用直接插入，冒泡"><a href="#4-序列初始基本有序（正序），宜用直接插入，冒泡" class="headerlink" title="　　4.序列初始基本有序（正序），宜用直接插入，冒泡"></a>　　4.序列初始基本有序（正序），宜用直接插入，冒泡</h6><p>参考资料:</p>
<p>代码实现参考：<a href="http://blog.csdn.net/without0815/article/details/7697916" target="_blank" rel="noopener">http://blog.csdn.net/without0815/article/details/7697916</a><br>算法性能分析参考：<a href="http://gengning938.blog.163.com/blog/static/128225381201141121326346/" target="_blank" rel="noopener">http://gengning938.blog.163.com/blog/static/128225381201141121326346/</a></p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> val;  </span><br><span class="line">    TreeNode left;  </span><br><span class="line">    TreeNode right;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.val = val;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求二叉树中的节点个数"><a href="#求二叉树中的节点个数" class="headerlink" title="求二叉树中的节点个数"></a>求二叉树中的节点个数</h4><h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNodeNumRec</span><span class="params">(TreeNode root)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> getNodeNumRec(root.left) + getNodeNumRec(root.right) + <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNodeNum</span><span class="params">(TreeNode root)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;  </span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();  </span><br><span class="line">    queue.add(root);  </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;  </span><br><span class="line">        TreeNode cur = queue.remove();      <span class="comment">// 从队头位置移除  </span></span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)&#123;           <span class="comment">// 如果有左孩子，加到队尾  </span></span><br><span class="line">            queue.add(cur.left);  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)&#123;      <span class="comment">// 如果有右孩子，加到队尾  </span></span><br><span class="line">            queue.add(cur.right);  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求树的深度"><a href="#求树的深度" class="headerlink" title="求树的深度"></a>求树的深度</h4><h5 id="递归解法：-O-n"><a href="#递归解法：-O-n" class="headerlink" title="递归解法： O(n)"></a>递归解法： O(n)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> * 求二叉树的深度（高度） 递归解法： O(n) </span><br><span class="line"> * （<span class="number">1</span>）如果二叉树为空，二叉树的深度为<span class="number">0</span>  </span><br><span class="line"> * （<span class="number">2</span>）如果二叉树不为空，二叉树的深度 = max(左子树深度， 右子树深度) + <span class="number">1</span> </span><br><span class="line"> */ </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDepthRec</span><span class="params">(TreeNode root)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> leftDepth = getDepthRec(root.left);  </span><br><span class="line">    <span class="keyword">int</span> rightDepth = getDepthRec(root.right);  </span><br><span class="line">    <span class="keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="迭代解法：-O-n"><a href="#迭代解法：-O-n" class="headerlink" title="迭代解法： O(n)"></a>迭代解法： O(n)</h5><p>基本思想同LevelOrderTraversal，还是用一个Queue  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;  </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">int</span> depth = <span class="number">0</span>;                          <span class="comment">// 深度  </span></span><br><span class="line">  <span class="keyword">int</span> currentLevelNodes = <span class="number">1</span>;      <span class="comment">// 当前Level，node的数量  </span></span><br><span class="line">  <span class="keyword">int</span> nextLevelNodes = <span class="number">0</span>;         <span class="comment">// 下一层Level，node的数量  </span></span><br><span class="line">     </span><br><span class="line">  LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();  </span><br><span class="line">  queue.add(root);  </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">while</span>( !queue.isEmpty() )&#123;  </span><br><span class="line">      TreeNode cur = queue.remove();      <span class="comment">// 从队头位置移除  </span></span><br><span class="line">      currentLevelNodes--;            <span class="comment">// 减少当前Level node的数量  </span></span><br><span class="line">      <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)&#123;               <span class="comment">// 如果有左孩子，加到队尾  </span></span><br><span class="line">          queue.add(cur.left);  </span><br><span class="line">          nextLevelNodes++;           <span class="comment">// 并增加下一层Level node的数量  </span></span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)&#123;          <span class="comment">// 如果有右孩子，加到队尾  </span></span><br><span class="line">          queue.add(cur.right);  </span><br><span class="line">          nextLevelNodes++;  </span><br><span class="line">      &#125;  </span><br><span class="line">         </span><br><span class="line">      <span class="keyword">if</span>(currentLevelNodes == <span class="number">0</span>)&#123; <span class="comment">// 说明已经遍历完当前层的所有节点  </span></span><br><span class="line">          depth++;                       <span class="comment">// 增加高度  </span></span><br><span class="line">          currentLevelNodes = nextLevelNodes;     <span class="comment">// 初始化下一层的遍历  </span></span><br><span class="line">          nextLevelNodes = <span class="number">0</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">return</span> depth;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><h5 id="前序遍历，中序遍历，后序遍历-前序遍历递归解法"><a href="#前序遍历，中序遍历，后序遍历-前序遍历递归解法" class="headerlink" title="前序遍历，中序遍历，后序遍历 前序遍历递归解法"></a>前序遍历，中序遍历，后序遍历 前序遍历递归解法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 前序遍历，中序遍历，后序遍历 前序遍历递归解法**：  </span></span><br><span class="line"><span class="comment"> * （1）如果二叉树为空，空操作  </span></span><br><span class="line"><span class="comment"> * （2）如果二叉树不为空，访问根节点，前序遍历左子树，前序遍历右子树 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorderTraversalRec</span><span class="params">(TreeNode root)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//前序</span></span><br><span class="line">    System.out.print(root.val + <span class="string">" "</span>);  </span><br><span class="line">    preorderTraversalRec(root.left);  </span><br><span class="line">    preorderTraversalRec(root.right);  </span><br><span class="line">    <span class="comment">//中序</span></span><br><span class="line">    preorderTraversalRec(root.left);  </span><br><span class="line">    System.out.print(root.val + <span class="string">" "</span>); </span><br><span class="line">    preorderTraversalRec(root.right);</span><br><span class="line">    <span class="comment">//后序</span></span><br><span class="line">    preorderTraversalRec(root.left);</span><br><span class="line">    preorderTraversalRec(root.right);</span><br><span class="line">    System.out.print(root.val + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="前序迭代解法"><a href="#前序迭代解法" class="headerlink" title="前序迭代解法"></a>前序迭代解法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment"> *  **前序遍历迭代解法**：用一个辅助stack，总是把右孩子放进栈 </span></span><br><span class="line"><span class="comment"> *  http://www.youtube.com/watch?v=uPTCbdHSFg4 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">       </span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();      <span class="comment">// 辅助stack  </span></span><br><span class="line">    stack.push(root);  </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">while</span>( !stack.isEmpty() )&#123;  </span><br><span class="line">        TreeNode cur = stack.pop();     <span class="comment">// 出栈栈顶元素  </span></span><br><span class="line">        System.out.print(cur.val + <span class="string">" "</span>);  </span><br><span class="line">           </span><br><span class="line">        <span class="comment">// 关键点：要先压入右孩子，再压入左孩子，这样在出栈时会先打印左孩子再打印右孩子  </span></span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)&#123;  </span><br><span class="line">            stack.push(cur.right);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>)&#123;  </span><br><span class="line">            stack.push(cur.left);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基础</title>
    <url>/2016/11/05/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p><img src="https://tracerzzz.ltd/20180309152056989944519.png" alt="20180309152056989944519.png"></p>
<h3 id="数据库三范式是什么"><a href="#数据库三范式是什么" class="headerlink" title="数据库三范式是什么?"></a>数据库三范式是什么?</h3><p> 1第一范式就是无重复的列。</p>
<p> 2第二范式就是无重复的行</p>
<blockquote>
<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。 员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是唯一的，因此每个员工可以被唯一区分。这个唯一属性列被称为主关键字或主键、主码。<br>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是非主属性非部分依赖于主关键字。</p>
</blockquote>
<p>3第三范式就是引用别的表的字段时，不能出现非主键字段。<br>第三范式（3NF）</p>
<blockquote>
<p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在图3-2的员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。</p>
</blockquote>
<h3 id="数据库表连接"><a href="#数据库表连接" class="headerlink" title="数据库表连接"></a>数据库表连接</h3><p>连接一共分为内连接、外连接和交叉连接</p>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接(INNER JOIN)使用比较运算符进行表间某(些)列数据的比较操作，并列出这些表中与连接条件相匹配的数据行。<br>根据所使用的比较方式不同，内连接又分为等值连接、自然连接和不等连接三种。</p>
<p>内连接分三种：</p>
<h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><p>等值连接：在连接条件中使用等于号(=)运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列。</p>
<h5 id="不等连接"><a href="#不等连接" class="headerlink" title="不等连接"></a>不等连接</h5><p>不等连接：在连接条件使用除等于运算符以外的其它比较运算符比较被连接的列的列值。这些运算符包括&gt;、&gt;=、、!。</p>
<h5 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h5><p>自然连接：在连接条件中使用等于(=)运算符比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的重复列。</p>
<p><em>等值连接与自然连接的区别：</em><br>1）<strong>等值连接中不要求相等属性值的属性名相同</strong>，而自然连接要求相等属性值的属性名必须相同，即两关系只有在同名属性才能进行自然连接。<br>2）<strong>等值连接不将重复属性去掉，而自然连接去掉重复属性，也可以说，自然连接是去掉重复列的等值连接。</strong></p>
<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>外连接分为左外连接(LEFT OUTER JOIN或LEFT JOIN)、右外连接(RIGHT OUTER JOIN或RIGHT JOIN)和全外连接(FULL OUTER JOIN或FULL JOIN)三种。<br>内连接查询时，返回查询结果集合中的仅是符合查询条件( WHERE 搜索条件或 HAVING 条件)和连接条件<br>的行。而采用外连接时，它返回到查询结果集合中的不仅包含符合连接条件的行，而且还包括左表(左外连接时)、右表(右外连接时)或两个边接表(全外连接)中的所有数据行。</p>
<p>如下面使用左外连接将论坛内容和作者信息连接起来：<br>代码:SELECT a.<em>,b.</em> FROM <code>luntan</code> as a LEFT JOIN usertable as b<br>ON a.username=b.username下面使用全外连接将city表中的所有作者以及user表中的所有作者，以及他们所在的城市：<br>代码:SELECT a.<em>,b.</em><br>FROM city as a FULL OUTER JOIN user as b<br>ON a.username=b.username</p>
<h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><p>交叉连接不带WHERE 子句，它返回被连接的两个表所有数据行的笛卡尔积，返回到结果集合中的数<br>据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。<br>例，titles表中有6类图书，而publishers表中有8家出版社，则下列交叉连接检索到的记录数将等<br>于6*8=48行。<br>代码:SELECT <code>type</code>,<code>pub_name</code><br>FROM <code>titles</code> CROSS JOIN <code>publishers</code><br>ORDER BY <code>type</code></p>
<h3 id="Group-by与having理解"><a href="#Group-by与having理解" class="headerlink" title="Group by与having理解"></a>Group by与having理解</h3><p><strong>group by 有一个原则,就是 select 后面的所有列中,没有使用聚合函数的列,必须出现在 group by 后面（重要）</strong></p>
<p>having子句与where有相似之处但也有区别,都是设定条件的语句。<br>在查询过程中聚合语句(sum,min,max,avg,count)要比having子句优先执行.而where子句在查询过程中执行优先级别优先于聚合语句(sum,min,max,avg,count)。</p>
<p>结论：<br>1.WHERE 子句用来筛选 FROM 子句中指定的操作所产生的行。<br>2.GROUP BY 子句用来分组 WHERE 子句的输出。<br>3.HAVING 子句用来从分组的结果中筛选行。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
